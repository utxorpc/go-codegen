// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        (unknown)
// source: utxorpc/v1alpha/cardano/cardano.proto

package cardano

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Purpose of the redeemer in a transaction.
type RedeemerPurpose int32

const (
	RedeemerPurpose_REDEEMER_PURPOSE_UNSPECIFIED RedeemerPurpose = 0
	RedeemerPurpose_REDEEMER_PURPOSE_SPEND       RedeemerPurpose = 1
	RedeemerPurpose_REDEEMER_PURPOSE_MINT        RedeemerPurpose = 2
	RedeemerPurpose_REDEEMER_PURPOSE_CERT        RedeemerPurpose = 3
	RedeemerPurpose_REDEEMER_PURPOSE_REWARD      RedeemerPurpose = 4
	RedeemerPurpose_REDEEMER_PURPOSE_VOTE        RedeemerPurpose = 5
	RedeemerPurpose_REDEEMER_PURPOSE_PROPOSE     RedeemerPurpose = 6
)

// Enum value maps for RedeemerPurpose.
var (
	RedeemerPurpose_name = map[int32]string{
		0: "REDEEMER_PURPOSE_UNSPECIFIED",
		1: "REDEEMER_PURPOSE_SPEND",
		2: "REDEEMER_PURPOSE_MINT",
		3: "REDEEMER_PURPOSE_CERT",
		4: "REDEEMER_PURPOSE_REWARD",
		5: "REDEEMER_PURPOSE_VOTE",
		6: "REDEEMER_PURPOSE_PROPOSE",
	}
	RedeemerPurpose_value = map[string]int32{
		"REDEEMER_PURPOSE_UNSPECIFIED": 0,
		"REDEEMER_PURPOSE_SPEND":       1,
		"REDEEMER_PURPOSE_MINT":        2,
		"REDEEMER_PURPOSE_CERT":        3,
		"REDEEMER_PURPOSE_REWARD":      4,
		"REDEEMER_PURPOSE_VOTE":        5,
		"REDEEMER_PURPOSE_PROPOSE":     6,
	}
)

func (x RedeemerPurpose) Enum() *RedeemerPurpose {
	p := new(RedeemerPurpose)
	*p = x
	return p
}

func (x RedeemerPurpose) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedeemerPurpose) Descriptor() protoreflect.EnumDescriptor {
	return file_utxorpc_v1alpha_cardano_cardano_proto_enumTypes[0].Descriptor()
}

func (RedeemerPurpose) Type() protoreflect.EnumType {
	return &file_utxorpc_v1alpha_cardano_cardano_proto_enumTypes[0]
}

func (x RedeemerPurpose) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RedeemerPurpose.Descriptor instead.
func (RedeemerPurpose) EnumDescriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{0}
}

type MirSource int32

const (
	MirSource_MIR_SOURCE_UNSPECIFIED MirSource = 0
	MirSource_MIR_SOURCE_RESERVES    MirSource = 1
	MirSource_MIR_SOURCE_TREASURY    MirSource = 2
)

// Enum value maps for MirSource.
var (
	MirSource_name = map[int32]string{
		0: "MIR_SOURCE_UNSPECIFIED",
		1: "MIR_SOURCE_RESERVES",
		2: "MIR_SOURCE_TREASURY",
	}
	MirSource_value = map[string]int32{
		"MIR_SOURCE_UNSPECIFIED": 0,
		"MIR_SOURCE_RESERVES":    1,
		"MIR_SOURCE_TREASURY":    2,
	}
)

func (x MirSource) Enum() *MirSource {
	p := new(MirSource)
	*p = x
	return p
}

func (x MirSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MirSource) Descriptor() protoreflect.EnumDescriptor {
	return file_utxorpc_v1alpha_cardano_cardano_proto_enumTypes[1].Descriptor()
}

func (MirSource) Type() protoreflect.EnumType {
	return &file_utxorpc_v1alpha_cardano_cardano_proto_enumTypes[1]
}

func (x MirSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MirSource.Descriptor instead.
func (MirSource) EnumDescriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{1}
}

// Redeemer information for a Plutus script.
type Redeemer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Purpose       RedeemerPurpose        `protobuf:"varint,1,opt,name=purpose,proto3,enum=utxorpc.v1alpha.cardano.RedeemerPurpose" json:"purpose,omitempty"` // Purpose of the redeemer.
	Payload       *PlutusData            `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`                                               // Plutus data associated with the redeemer.
	Index         uint32                 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`                                                  // Index of the redee mer.
	ExUnits       *ExUnits               `protobuf:"bytes,4,opt,name=ex_units,json=exUnits,proto3" json:"ex_units,omitempty"`                                // Execution units consumed by the redeemer.
	OriginalCbor  []byte                 `protobuf:"bytes,5,opt,name=original_cbor,json=originalCbor,proto3" json:"original_cbor,omitempty"`                 // Original cbor-encoded data as seen on-chain
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Redeemer) Reset() {
	*x = Redeemer{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Redeemer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Redeemer) ProtoMessage() {}

func (x *Redeemer) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Redeemer.ProtoReflect.Descriptor instead.
func (*Redeemer) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{0}
}

func (x *Redeemer) GetPurpose() RedeemerPurpose {
	if x != nil {
		return x.Purpose
	}
	return RedeemerPurpose_REDEEMER_PURPOSE_UNSPECIFIED
}

func (x *Redeemer) GetPayload() *PlutusData {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Redeemer) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Redeemer) GetExUnits() *ExUnits {
	if x != nil {
		return x.ExUnits
	}
	return nil
}

func (x *Redeemer) GetOriginalCbor() []byte {
	if x != nil {
		return x.OriginalCbor
	}
	return nil
}

// Represents a transaction input in the Cardano blockchain.
type TxInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TxHash        []byte                 `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`                 // Hash of the previous transaction.
	OutputIndex   uint32                 `protobuf:"varint,2,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"` // Index of the output in the previous transaction.
	AsOutput      *TxOutput              `protobuf:"bytes,3,opt,name=as_output,json=asOutput,proto3" json:"as_output,omitempty"`           // Content of the input represented as output of the related transaction
	Redeemer      *Redeemer              `protobuf:"bytes,4,opt,name=redeemer,proto3" json:"redeemer,omitempty"`                           // Redeemer for the Plutus script.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TxInput) Reset() {
	*x = TxInput{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxInput) ProtoMessage() {}

func (x *TxInput) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxInput.ProtoReflect.Descriptor instead.
func (*TxInput) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{1}
}

func (x *TxInput) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *TxInput) GetOutputIndex() uint32 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

func (x *TxInput) GetAsOutput() *TxOutput {
	if x != nil {
		return x.AsOutput
	}
	return nil
}

func (x *TxInput) GetRedeemer() *Redeemer {
	if x != nil {
		return x.Redeemer
	}
	return nil
}

// Represents a transaction output in the Cardano blockchain.
type TxOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       []byte                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"` // Address receiving the output.
	Coin          uint64                 `protobuf:"varint,2,opt,name=coin,proto3" json:"coin,omitempty"`      // Amount of ADA in the output.
	Assets        []*Multiasset          `protobuf:"bytes,3,rep,name=assets,proto3" json:"assets,omitempty"`   // Additional native (non-ADA) assets in the output.
	Datum         *Datum                 `protobuf:"bytes,4,opt,name=datum,proto3" json:"datum,omitempty"`     // Plutus data associated with the output.
	Script        *Script                `protobuf:"bytes,5,opt,name=script,proto3" json:"script,omitempty"`   // Script associated with the output.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TxOutput) Reset() {
	*x = TxOutput{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxOutput) ProtoMessage() {}

func (x *TxOutput) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxOutput.ProtoReflect.Descriptor instead.
func (*TxOutput) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{2}
}

func (x *TxOutput) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *TxOutput) GetCoin() uint64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *TxOutput) GetAssets() []*Multiasset {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *TxOutput) GetDatum() *Datum {
	if x != nil {
		return x.Datum
	}
	return nil
}

func (x *TxOutput) GetScript() *Script {
	if x != nil {
		return x.Script
	}
	return nil
}

type Datum struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          []byte                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`                                     // Hash of this datum as seen on-chain
	Payload       *PlutusData            `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`                               // Parsed Plutus data payload
	OriginalCbor  []byte                 `protobuf:"bytes,3,opt,name=original_cbor,json=originalCbor,proto3" json:"original_cbor,omitempty"` // Original cbor-encoded data as seen on-chain
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Datum) Reset() {
	*x = Datum{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Datum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Datum) ProtoMessage() {}

func (x *Datum) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Datum.ProtoReflect.Descriptor instead.
func (*Datum) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{3}
}

func (x *Datum) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *Datum) GetPayload() *PlutusData {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Datum) GetOriginalCbor() []byte {
	if x != nil {
		return x.OriginalCbor
	}
	return nil
}

// Represents a custom asset in the Cardano blockchain.
type Asset struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          []byte                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                // Name of the custom asset.
	OutputCoin    uint64                 `protobuf:"varint,2,opt,name=output_coin,json=outputCoin,proto3" json:"output_coin,omitempty"` // Quantity of the custom asset in case of an output.
	MintCoin      int64                  `protobuf:"varint,3,opt,name=mint_coin,json=mintCoin,proto3" json:"mint_coin,omitempty"`       // Quantity of the custom asset in case of a mint.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Asset) Reset() {
	*x = Asset{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asset) ProtoMessage() {}

func (x *Asset) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asset.ProtoReflect.Descriptor instead.
func (*Asset) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{4}
}

func (x *Asset) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Asset) GetOutputCoin() uint64 {
	if x != nil {
		return x.OutputCoin
	}
	return 0
}

func (x *Asset) GetMintCoin() int64 {
	if x != nil {
		return x.MintCoin
	}
	return 0
}

// Represents a multi-asset group in the Cardano blockchain.
type Multiasset struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PolicyId      []byte                 `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"` // Policy ID governing the custom assets.
	Assets        []*Asset               `protobuf:"bytes,2,rep,name=assets,proto3" json:"assets,omitempty"`                     // List of custom assets.
	Redeemer      *Redeemer              `protobuf:"bytes,3,opt,name=redeemer,proto3" json:"redeemer,omitempty"`                 // Redeemer for the Plutus script.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Multiasset) Reset() {
	*x = Multiasset{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Multiasset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Multiasset) ProtoMessage() {}

func (x *Multiasset) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Multiasset.ProtoReflect.Descriptor instead.
func (*Multiasset) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{5}
}

func (x *Multiasset) GetPolicyId() []byte {
	if x != nil {
		return x.PolicyId
	}
	return nil
}

func (x *Multiasset) GetAssets() []*Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *Multiasset) GetRedeemer() *Redeemer {
	if x != nil {
		return x.Redeemer
	}
	return nil
}

// Represents the validity interval of a transaction.
type TxValidity struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Start         uint64                 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"` // Start of the validity interval.
	Ttl           uint64                 `protobuf:"varint,2,opt,name=ttl,proto3" json:"ttl,omitempty"`     // End of the validity interval (TTL: Time to Live).
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TxValidity) Reset() {
	*x = TxValidity{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxValidity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxValidity) ProtoMessage() {}

func (x *TxValidity) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxValidity.ProtoReflect.Descriptor instead.
func (*TxValidity) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{6}
}

func (x *TxValidity) GetStart() uint64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *TxValidity) GetTtl() uint64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

// Represents the collateral information for a transaction.
type Collateral struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Collateral       []*TxInput             `protobuf:"bytes,1,rep,name=collateral,proto3" json:"collateral,omitempty"`                                     // Collateral inputs for the transaction.
	CollateralReturn *TxOutput              `protobuf:"bytes,2,opt,name=collateral_return,json=collateralReturn,proto3" json:"collateral_return,omitempty"` // Collateral return in case of script failure.
	TotalCollateral  uint64                 `protobuf:"varint,3,opt,name=total_collateral,json=totalCollateral,proto3" json:"total_collateral,omitempty"`   // Total amount of collateral.
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Collateral) Reset() {
	*x = Collateral{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Collateral) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collateral) ProtoMessage() {}

func (x *Collateral) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collateral.ProtoReflect.Descriptor instead.
func (*Collateral) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{7}
}

func (x *Collateral) GetCollateral() []*TxInput {
	if x != nil {
		return x.Collateral
	}
	return nil
}

func (x *Collateral) GetCollateralReturn() *TxOutput {
	if x != nil {
		return x.CollateralReturn
	}
	return nil
}

func (x *Collateral) GetTotalCollateral() uint64 {
	if x != nil {
		return x.TotalCollateral
	}
	return 0
}

// Represents a withdrawal from a reward account.
type Withdrawal struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RewardAccount []byte                 `protobuf:"bytes,1,opt,name=reward_account,json=rewardAccount,proto3" json:"reward_account,omitempty"` // Address of the reward account.
	Coin          uint64                 `protobuf:"varint,2,opt,name=coin,proto3" json:"coin,omitempty"`                                       // Amount of ADA withdrawn.
	Redeemer      *Redeemer              `protobuf:"bytes,3,opt,name=redeemer,proto3" json:"redeemer,omitempty"`                                // Redeemer for the Plutus script.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Withdrawal) Reset() {
	*x = Withdrawal{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Withdrawal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Withdrawal) ProtoMessage() {}

func (x *Withdrawal) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Withdrawal.ProtoReflect.Descriptor instead.
func (*Withdrawal) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{8}
}

func (x *Withdrawal) GetRewardAccount() []byte {
	if x != nil {
		return x.RewardAccount
	}
	return nil
}

func (x *Withdrawal) GetCoin() uint64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *Withdrawal) GetRedeemer() *Redeemer {
	if x != nil {
		return x.Redeemer
	}
	return nil
}

// Represents a set of witnesses that validate a transaction
type WitnessSet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vkeywitness   []*VKeyWitness         `protobuf:"bytes,1,rep,name=vkeywitness,proto3" json:"vkeywitness,omitempty"`                       // List of VKey witnesses.
	Script        []*Script              `protobuf:"bytes,2,rep,name=script,proto3" json:"script,omitempty"`                                 // List of scripts.
	PlutusDatums  []*PlutusData          `protobuf:"bytes,3,rep,name=plutus_datums,json=plutusDatums,proto3" json:"plutus_datums,omitempty"` // List of Plutus data elements associated with the transaction.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WitnessSet) Reset() {
	*x = WitnessSet{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WitnessSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WitnessSet) ProtoMessage() {}

func (x *WitnessSet) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WitnessSet.ProtoReflect.Descriptor instead.
func (*WitnessSet) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{9}
}

func (x *WitnessSet) GetVkeywitness() []*VKeyWitness {
	if x != nil {
		return x.Vkeywitness
	}
	return nil
}

func (x *WitnessSet) GetScript() []*Script {
	if x != nil {
		return x.Script
	}
	return nil
}

func (x *WitnessSet) GetPlutusDatums() []*PlutusData {
	if x != nil {
		return x.PlutusDatums
	}
	return nil
}

// Auxiliary data not directly tied to the validation process
type AuxData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Metadata      []*Metadata            `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata,omitempty"` // List of auxiliary metadata elements.
	Scripts       []*Script              `protobuf:"bytes,2,rep,name=scripts,proto3" json:"scripts,omitempty"`   // List of auxiliary scripts.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuxData) Reset() {
	*x = AuxData{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuxData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuxData) ProtoMessage() {}

func (x *AuxData) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuxData.ProtoReflect.Descriptor instead.
func (*AuxData) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{10}
}

func (x *AuxData) GetMetadata() []*Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *AuxData) GetScripts() []*Script {
	if x != nil {
		return x.Scripts
	}
	return nil
}

// Represents a transaction in the Cardano blockchain.
type Tx struct {
	state           protoimpl.MessageState      `protogen:"open.v1"`
	Inputs          []*TxInput                  `protobuf:"bytes,1,rep,name=inputs,proto3" json:"inputs,omitempty"`                                          // List of transaction inputs
	Outputs         []*TxOutput                 `protobuf:"bytes,2,rep,name=outputs,proto3" json:"outputs,omitempty"`                                        // List of transaction outputs
	Certificates    []*Certificate              `protobuf:"bytes,3,rep,name=certificates,proto3" json:"certificates,omitempty"`                              // List of certificates
	Withdrawals     []*Withdrawal               `protobuf:"bytes,4,rep,name=withdrawals,proto3" json:"withdrawals,omitempty"`                                // List of withdrawals
	Mint            []*Multiasset               `protobuf:"bytes,5,rep,name=mint,proto3" json:"mint,omitempty"`                                              // List of minted custom assets
	ReferenceInputs []*TxInput                  `protobuf:"bytes,6,rep,name=reference_inputs,json=referenceInputs,proto3" json:"reference_inputs,omitempty"` // List of reference inputs
	Witnesses       *WitnessSet                 `protobuf:"bytes,7,opt,name=witnesses,proto3" json:"witnesses,omitempty"`                                    // Witnesses that validte the transaction
	Collateral      *Collateral                 `protobuf:"bytes,8,opt,name=collateral,proto3" json:"collateral,omitempty"`                                  // Collateral details in case of failed transaction
	Fee             uint64                      `protobuf:"varint,9,opt,name=fee,proto3" json:"fee,omitempty"`                                               // Transaction fee in ADA
	Validity        *TxValidity                 `protobuf:"bytes,10,opt,name=validity,proto3" json:"validity,omitempty"`                                     // Validity interval of the transaction
	Successful      bool                        `protobuf:"varint,11,opt,name=successful,proto3" json:"successful,omitempty"`                                // Flag indicating whether the transaction was successful
	Auxiliary       *AuxData                    `protobuf:"bytes,12,opt,name=auxiliary,proto3" json:"auxiliary,omitempty"`                                   // Auxiliary data not directly tied to the validation process
	Hash            []byte                      `protobuf:"bytes,13,opt,name=hash,proto3" json:"hash,omitempty"`                                             // Hash of the transaction that serves as main identifier
	Proposals       []*GovernanceActionProposal `protobuf:"bytes,14,rep,name=proposals,proto3" json:"proposals,omitempty"`                                   // List of governance actions proposed
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Tx) Reset() {
	*x = Tx{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tx) ProtoMessage() {}

func (x *Tx) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tx.ProtoReflect.Descriptor instead.
func (*Tx) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{11}
}

func (x *Tx) GetInputs() []*TxInput {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *Tx) GetOutputs() []*TxOutput {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *Tx) GetCertificates() []*Certificate {
	if x != nil {
		return x.Certificates
	}
	return nil
}

func (x *Tx) GetWithdrawals() []*Withdrawal {
	if x != nil {
		return x.Withdrawals
	}
	return nil
}

func (x *Tx) GetMint() []*Multiasset {
	if x != nil {
		return x.Mint
	}
	return nil
}

func (x *Tx) GetReferenceInputs() []*TxInput {
	if x != nil {
		return x.ReferenceInputs
	}
	return nil
}

func (x *Tx) GetWitnesses() *WitnessSet {
	if x != nil {
		return x.Witnesses
	}
	return nil
}

func (x *Tx) GetCollateral() *Collateral {
	if x != nil {
		return x.Collateral
	}
	return nil
}

func (x *Tx) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *Tx) GetValidity() *TxValidity {
	if x != nil {
		return x.Validity
	}
	return nil
}

func (x *Tx) GetSuccessful() bool {
	if x != nil {
		return x.Successful
	}
	return false
}

func (x *Tx) GetAuxiliary() *AuxData {
	if x != nil {
		return x.Auxiliary
	}
	return nil
}

func (x *Tx) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *Tx) GetProposals() []*GovernanceActionProposal {
	if x != nil {
		return x.Proposals
	}
	return nil
}

// Define a governance action proposal
type GovernanceActionProposal struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Deposit       uint64                 `protobuf:"varint,1,opt,name=deposit,proto3" json:"deposit,omitempty"`                                 // The amount deposited for the governance action
	RewardAccount []byte                 `protobuf:"bytes,2,opt,name=reward_account,json=rewardAccount,proto3" json:"reward_account,omitempty"` // The reward account the deposit should be returned to
	GovAction     *GovernanceAction      `protobuf:"bytes,3,opt,name=gov_action,json=govAction,proto3" json:"gov_action,omitempty"`
	Anchor        *Anchor                `protobuf:"bytes,4,opt,name=anchor,proto3" json:"anchor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GovernanceActionProposal) Reset() {
	*x = GovernanceActionProposal{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GovernanceActionProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GovernanceActionProposal) ProtoMessage() {}

func (x *GovernanceActionProposal) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GovernanceActionProposal.ProtoReflect.Descriptor instead.
func (*GovernanceActionProposal) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{12}
}

func (x *GovernanceActionProposal) GetDeposit() uint64 {
	if x != nil {
		return x.Deposit
	}
	return 0
}

func (x *GovernanceActionProposal) GetRewardAccount() []byte {
	if x != nil {
		return x.RewardAccount
	}
	return nil
}

func (x *GovernanceActionProposal) GetGovAction() *GovernanceAction {
	if x != nil {
		return x.GovAction
	}
	return nil
}

func (x *GovernanceActionProposal) GetAnchor() *Anchor {
	if x != nil {
		return x.Anchor
	}
	return nil
}

// Define a Governance Action
type GovernanceAction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to GovernanceAction:
	//
	//	*GovernanceAction_ParameterChangeAction
	//	*GovernanceAction_HardForkInitiationAction
	//	*GovernanceAction_TreasuryWithdrawalsAction
	//	*GovernanceAction_NoConfidenceAction
	//	*GovernanceAction_UpdateCommitteeAction
	//	*GovernanceAction_NewConstitutionAction
	//	*GovernanceAction_InfoAction
	GovernanceAction isGovernanceAction_GovernanceAction `protobuf_oneof:"governance_action"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GovernanceAction) Reset() {
	*x = GovernanceAction{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GovernanceAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GovernanceAction) ProtoMessage() {}

func (x *GovernanceAction) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GovernanceAction.ProtoReflect.Descriptor instead.
func (*GovernanceAction) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{13}
}

func (x *GovernanceAction) GetGovernanceAction() isGovernanceAction_GovernanceAction {
	if x != nil {
		return x.GovernanceAction
	}
	return nil
}

func (x *GovernanceAction) GetParameterChangeAction() *ParameterChangeAction {
	if x != nil {
		if x, ok := x.GovernanceAction.(*GovernanceAction_ParameterChangeAction); ok {
			return x.ParameterChangeAction
		}
	}
	return nil
}

func (x *GovernanceAction) GetHardForkInitiationAction() *HardForkInitiationAction {
	if x != nil {
		if x, ok := x.GovernanceAction.(*GovernanceAction_HardForkInitiationAction); ok {
			return x.HardForkInitiationAction
		}
	}
	return nil
}

func (x *GovernanceAction) GetTreasuryWithdrawalsAction() *TreasuryWithdrawalsAction {
	if x != nil {
		if x, ok := x.GovernanceAction.(*GovernanceAction_TreasuryWithdrawalsAction); ok {
			return x.TreasuryWithdrawalsAction
		}
	}
	return nil
}

func (x *GovernanceAction) GetNoConfidenceAction() *NoConfidenceAction {
	if x != nil {
		if x, ok := x.GovernanceAction.(*GovernanceAction_NoConfidenceAction); ok {
			return x.NoConfidenceAction
		}
	}
	return nil
}

func (x *GovernanceAction) GetUpdateCommitteeAction() *UpdateCommitteeAction {
	if x != nil {
		if x, ok := x.GovernanceAction.(*GovernanceAction_UpdateCommitteeAction); ok {
			return x.UpdateCommitteeAction
		}
	}
	return nil
}

func (x *GovernanceAction) GetNewConstitutionAction() *NewConstitutionAction {
	if x != nil {
		if x, ok := x.GovernanceAction.(*GovernanceAction_NewConstitutionAction); ok {
			return x.NewConstitutionAction
		}
	}
	return nil
}

func (x *GovernanceAction) GetInfoAction() uint32 {
	if x != nil {
		if x, ok := x.GovernanceAction.(*GovernanceAction_InfoAction); ok {
			return x.InfoAction
		}
	}
	return 0
}

type isGovernanceAction_GovernanceAction interface {
	isGovernanceAction_GovernanceAction()
}

type GovernanceAction_ParameterChangeAction struct {
	ParameterChangeAction *ParameterChangeAction `protobuf:"bytes,1,opt,name=parameter_change_action,json=parameterChangeAction,proto3,oneof"` // Change on-chain parameters
}

type GovernanceAction_HardForkInitiationAction struct {
	HardForkInitiationAction *HardForkInitiationAction `protobuf:"bytes,2,opt,name=hard_fork_initiation_action,json=hardForkInitiationAction,proto3,oneof"` // Initiate a Hard Fork
}

type GovernanceAction_TreasuryWithdrawalsAction struct {
	TreasuryWithdrawalsAction *TreasuryWithdrawalsAction `protobuf:"bytes,3,opt,name=treasury_withdrawals_action,json=treasuryWithdrawalsAction,proto3,oneof"` // Withdraw from the Treasury
}

type GovernanceAction_NoConfidenceAction struct {
	NoConfidenceAction *NoConfidenceAction `protobuf:"bytes,4,opt,name=no_confidence_action,json=noConfidenceAction,proto3,oneof"` //
}

type GovernanceAction_UpdateCommitteeAction struct {
	UpdateCommitteeAction *UpdateCommitteeAction `protobuf:"bytes,5,opt,name=update_committee_action,json=updateCommitteeAction,proto3,oneof"` // Update the Constitution Committee
}

type GovernanceAction_NewConstitutionAction struct {
	NewConstitutionAction *NewConstitutionAction `protobuf:"bytes,6,opt,name=new_constitution_action,json=newConstitutionAction,proto3,oneof"` // Replace the Constitution
}

type GovernanceAction_InfoAction struct {
	// TODO: revisit if there's a better way to handle this option because it doesn't actually need a value but proto syntax needs to require it
	InfoAction uint32 `protobuf:"varint,7,opt,name=info_action,json=infoAction,proto3,oneof"` // Info action should just be the integer number 6
}

func (*GovernanceAction_ParameterChangeAction) isGovernanceAction_GovernanceAction() {}

func (*GovernanceAction_HardForkInitiationAction) isGovernanceAction_GovernanceAction() {}

func (*GovernanceAction_TreasuryWithdrawalsAction) isGovernanceAction_GovernanceAction() {}

func (*GovernanceAction_NoConfidenceAction) isGovernanceAction_GovernanceAction() {}

func (*GovernanceAction_UpdateCommitteeAction) isGovernanceAction_GovernanceAction() {}

func (*GovernanceAction_NewConstitutionAction) isGovernanceAction_GovernanceAction() {}

func (*GovernanceAction_InfoAction) isGovernanceAction_GovernanceAction() {}

type GovernanceActionId struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	TransactionId         []byte                 `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	GovernanceActionIndex uint32                 `protobuf:"varint,2,opt,name=governance_action_index,json=governanceActionIndex,proto3" json:"governance_action_index,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *GovernanceActionId) Reset() {
	*x = GovernanceActionId{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GovernanceActionId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GovernanceActionId) ProtoMessage() {}

func (x *GovernanceActionId) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GovernanceActionId.ProtoReflect.Descriptor instead.
func (*GovernanceActionId) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{14}
}

func (x *GovernanceActionId) GetTransactionId() []byte {
	if x != nil {
		return x.TransactionId
	}
	return nil
}

func (x *GovernanceActionId) GetGovernanceActionIndex() uint32 {
	if x != nil {
		return x.GovernanceActionIndex
	}
	return 0
}

type ParameterChangeAction struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	GovActionId         *GovernanceActionId    `protobuf:"bytes,1,opt,name=gov_action_id,json=govActionId,proto3" json:"gov_action_id,omitempty"`
	ProtocolParamUpdate *PParams               `protobuf:"bytes,2,opt,name=protocol_param_update,json=protocolParamUpdate,proto3" json:"protocol_param_update,omitempty"` // The updates proposed
	PolicyHash          []byte                 `protobuf:"bytes,3,opt,name=policy_hash,json=policyHash,proto3" json:"policy_hash,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ParameterChangeAction) Reset() {
	*x = ParameterChangeAction{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParameterChangeAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterChangeAction) ProtoMessage() {}

func (x *ParameterChangeAction) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterChangeAction.ProtoReflect.Descriptor instead.
func (*ParameterChangeAction) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{15}
}

func (x *ParameterChangeAction) GetGovActionId() *GovernanceActionId {
	if x != nil {
		return x.GovActionId
	}
	return nil
}

func (x *ParameterChangeAction) GetProtocolParamUpdate() *PParams {
	if x != nil {
		return x.ProtocolParamUpdate
	}
	return nil
}

func (x *ParameterChangeAction) GetPolicyHash() []byte {
	if x != nil {
		return x.PolicyHash
	}
	return nil
}

type HardForkInitiationAction struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	GovActionId     *GovernanceActionId    `protobuf:"bytes,1,opt,name=gov_action_id,json=govActionId,proto3" json:"gov_action_id,omitempty"`
	ProtocolVersion *ProtocolVersion       `protobuf:"bytes,2,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"` // The protocol version to fork to
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *HardForkInitiationAction) Reset() {
	*x = HardForkInitiationAction{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HardForkInitiationAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardForkInitiationAction) ProtoMessage() {}

func (x *HardForkInitiationAction) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardForkInitiationAction.ProtoReflect.Descriptor instead.
func (*HardForkInitiationAction) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{16}
}

func (x *HardForkInitiationAction) GetGovActionId() *GovernanceActionId {
	if x != nil {
		return x.GovActionId
	}
	return nil
}

func (x *HardForkInitiationAction) GetProtocolVersion() *ProtocolVersion {
	if x != nil {
		return x.ProtocolVersion
	}
	return nil
}

type TreasuryWithdrawalsAction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Withdrawals   []*WithdrawalAmount    `protobuf:"bytes,1,rep,name=withdrawals,proto3" json:"withdrawals,omitempty"` // A map of the withdrawals to make
	PolicyHash    []byte                 `protobuf:"bytes,2,opt,name=policy_hash,json=policyHash,proto3" json:"policy_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TreasuryWithdrawalsAction) Reset() {
	*x = TreasuryWithdrawalsAction{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TreasuryWithdrawalsAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreasuryWithdrawalsAction) ProtoMessage() {}

func (x *TreasuryWithdrawalsAction) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreasuryWithdrawalsAction.ProtoReflect.Descriptor instead.
func (*TreasuryWithdrawalsAction) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{17}
}

func (x *TreasuryWithdrawalsAction) GetWithdrawals() []*WithdrawalAmount {
	if x != nil {
		return x.Withdrawals
	}
	return nil
}

func (x *TreasuryWithdrawalsAction) GetPolicyHash() []byte {
	if x != nil {
		return x.PolicyHash
	}
	return nil
}

type WithdrawalAmount struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RewardAccount []byte                 `protobuf:"bytes,1,opt,name=reward_account,json=rewardAccount,proto3" json:"reward_account,omitempty"`
	Coin          uint64                 `protobuf:"varint,2,opt,name=coin,proto3" json:"coin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WithdrawalAmount) Reset() {
	*x = WithdrawalAmount{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawalAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawalAmount) ProtoMessage() {}

func (x *WithdrawalAmount) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawalAmount.ProtoReflect.Descriptor instead.
func (*WithdrawalAmount) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{18}
}

func (x *WithdrawalAmount) GetRewardAccount() []byte {
	if x != nil {
		return x.RewardAccount
	}
	return nil
}

func (x *WithdrawalAmount) GetCoin() uint64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

type NoConfidenceAction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GovActionId   *GovernanceActionId    `protobuf:"bytes,1,opt,name=gov_action_id,json=govActionId,proto3" json:"gov_action_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NoConfidenceAction) Reset() {
	*x = NoConfidenceAction{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NoConfidenceAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoConfidenceAction) ProtoMessage() {}

func (x *NoConfidenceAction) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoConfidenceAction.ProtoReflect.Descriptor instead.
func (*NoConfidenceAction) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{19}
}

func (x *NoConfidenceAction) GetGovActionId() *GovernanceActionId {
	if x != nil {
		return x.GovActionId
	}
	return nil
}

type UpdateCommitteeAction struct {
	state                      protoimpl.MessageState     `protogen:"open.v1"`
	GovActionId                *GovernanceActionId        `protobuf:"bytes,1,opt,name=gov_action_id,json=govActionId,proto3" json:"gov_action_id,omitempty"`
	RemoveCommitteeCredentials []*StakeCredential         `protobuf:"bytes,2,rep,name=remove_committee_credentials,json=removeCommitteeCredentials,proto3" json:"remove_committee_credentials,omitempty"` // Committee members to remove (if any)
	NewCommitteeCredentials    []*NewCommitteeCredentials `protobuf:"bytes,3,rep,name=new_committee_credentials,json=newCommitteeCredentials,proto3" json:"new_committee_credentials,omitempty"`          // The new committee members
	NewCommitteeThreshold      *RationalNumber            `protobuf:"bytes,4,opt,name=new_committee_threshold,json=newCommitteeThreshold,proto3" json:"new_committee_threshold,omitempty"`                // The required threshold for the committee
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *UpdateCommitteeAction) Reset() {
	*x = UpdateCommitteeAction{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCommitteeAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCommitteeAction) ProtoMessage() {}

func (x *UpdateCommitteeAction) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCommitteeAction.ProtoReflect.Descriptor instead.
func (*UpdateCommitteeAction) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateCommitteeAction) GetGovActionId() *GovernanceActionId {
	if x != nil {
		return x.GovActionId
	}
	return nil
}

func (x *UpdateCommitteeAction) GetRemoveCommitteeCredentials() []*StakeCredential {
	if x != nil {
		return x.RemoveCommitteeCredentials
	}
	return nil
}

func (x *UpdateCommitteeAction) GetNewCommitteeCredentials() []*NewCommitteeCredentials {
	if x != nil {
		return x.NewCommitteeCredentials
	}
	return nil
}

func (x *UpdateCommitteeAction) GetNewCommitteeThreshold() *RationalNumber {
	if x != nil {
		return x.NewCommitteeThreshold
	}
	return nil
}

type NewConstitutionAction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GovActionId   *GovernanceActionId    `protobuf:"bytes,1,opt,name=gov_action_id,json=govActionId,proto3" json:"gov_action_id,omitempty"`
	Constitution  *Constitution          `protobuf:"bytes,2,opt,name=constitution,proto3" json:"constitution,omitempty"` // The Constitution proposed
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewConstitutionAction) Reset() {
	*x = NewConstitutionAction{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewConstitutionAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewConstitutionAction) ProtoMessage() {}

func (x *NewConstitutionAction) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewConstitutionAction.ProtoReflect.Descriptor instead.
func (*NewConstitutionAction) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{21}
}

func (x *NewConstitutionAction) GetGovActionId() *GovernanceActionId {
	if x != nil {
		return x.GovActionId
	}
	return nil
}

func (x *NewConstitutionAction) GetConstitution() *Constitution {
	if x != nil {
		return x.Constitution
	}
	return nil
}

type Constitution struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Anchor        *Anchor                `protobuf:"bytes,1,opt,name=anchor,proto3" json:"anchor,omitempty"` // Anchor to the new document
	Hash          []byte                 `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`     // Hash of the document
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Constitution) Reset() {
	*x = Constitution{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Constitution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Constitution) ProtoMessage() {}

func (x *Constitution) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Constitution.ProtoReflect.Descriptor instead.
func (*Constitution) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{22}
}

func (x *Constitution) GetAnchor() *Anchor {
	if x != nil {
		return x.Anchor
	}
	return nil
}

func (x *Constitution) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

// The new committee credential are passed as a map where the key is the committee cold credential hash
// and the value is the expiration epoch for that credential
type NewCommitteeCredentials struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	CommitteeColdCredential *StakeCredential       `protobuf:"bytes,1,opt,name=committee_cold_credential,json=committeeColdCredential,proto3" json:"committee_cold_credential,omitempty"`
	ExpiresEpoch            uint32                 `protobuf:"varint,2,opt,name=expires_epoch,json=expiresEpoch,proto3" json:"expires_epoch,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *NewCommitteeCredentials) Reset() {
	*x = NewCommitteeCredentials{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewCommitteeCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewCommitteeCredentials) ProtoMessage() {}

func (x *NewCommitteeCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewCommitteeCredentials.ProtoReflect.Descriptor instead.
func (*NewCommitteeCredentials) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{23}
}

func (x *NewCommitteeCredentials) GetCommitteeColdCredential() *StakeCredential {
	if x != nil {
		return x.CommitteeColdCredential
	}
	return nil
}

func (x *NewCommitteeCredentials) GetExpiresEpoch() uint32 {
	if x != nil {
		return x.ExpiresEpoch
	}
	return 0
}

// Contains the header information for a block.
type BlockHeader struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Slot          uint64                 `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`     // Slot number.
	Hash          []byte                 `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`      // Block hash.
	Height        uint64                 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"` // Block height.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockHeader) Reset() {
	*x = BlockHeader{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHeader) ProtoMessage() {}

func (x *BlockHeader) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHeader.ProtoReflect.Descriptor instead.
func (*BlockHeader) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{24}
}

func (x *BlockHeader) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *BlockHeader) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *BlockHeader) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

// Contains the transaction data for a block.
type BlockBody struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tx            []*Tx                  `protobuf:"bytes,1,rep,name=tx,proto3" json:"tx,omitempty"` // List of transactions.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockBody) Reset() {
	*x = BlockBody{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockBody) ProtoMessage() {}

func (x *BlockBody) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockBody.ProtoReflect.Descriptor instead.
func (*BlockBody) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{25}
}

func (x *BlockBody) GetTx() []*Tx {
	if x != nil {
		return x.Tx
	}
	return nil
}

// Represents a complete block, including header and body.
type Block struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Header        *BlockHeader           `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"` // Block header.
	Body          *BlockBody             `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`     // Block body.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Block) Reset() {
	*x = Block{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{26}
}

func (x *Block) GetHeader() *BlockHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Block) GetBody() *BlockBody {
	if x != nil {
		return x.Body
	}
	return nil
}

// Represents a VKey witness used to sign a transaction.
type VKeyWitness struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vkey          []byte                 `protobuf:"bytes,1,opt,name=vkey,proto3" json:"vkey,omitempty"`           // Verification key.
	Signature     []byte                 `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"` // Signature generated using the associated private key.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VKeyWitness) Reset() {
	*x = VKeyWitness{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VKeyWitness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VKeyWitness) ProtoMessage() {}

func (x *VKeyWitness) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VKeyWitness.ProtoReflect.Descriptor instead.
func (*VKeyWitness) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{27}
}

func (x *VKeyWitness) GetVkey() []byte {
	if x != nil {
		return x.Vkey
	}
	return nil
}

func (x *VKeyWitness) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// Represents a native script in Cardano.
type NativeScript struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to NativeScript:
	//
	//	*NativeScript_ScriptPubkey
	//	*NativeScript_ScriptAll
	//	*NativeScript_ScriptAny
	//	*NativeScript_ScriptNOfK
	//	*NativeScript_InvalidBefore
	//	*NativeScript_InvalidHereafter
	NativeScript  isNativeScript_NativeScript `protobuf_oneof:"native_script"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NativeScript) Reset() {
	*x = NativeScript{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NativeScript) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeScript) ProtoMessage() {}

func (x *NativeScript) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeScript.ProtoReflect.Descriptor instead.
func (*NativeScript) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{28}
}

func (x *NativeScript) GetNativeScript() isNativeScript_NativeScript {
	if x != nil {
		return x.NativeScript
	}
	return nil
}

func (x *NativeScript) GetScriptPubkey() []byte {
	if x != nil {
		if x, ok := x.NativeScript.(*NativeScript_ScriptPubkey); ok {
			return x.ScriptPubkey
		}
	}
	return nil
}

func (x *NativeScript) GetScriptAll() *NativeScriptList {
	if x != nil {
		if x, ok := x.NativeScript.(*NativeScript_ScriptAll); ok {
			return x.ScriptAll
		}
	}
	return nil
}

func (x *NativeScript) GetScriptAny() *NativeScriptList {
	if x != nil {
		if x, ok := x.NativeScript.(*NativeScript_ScriptAny); ok {
			return x.ScriptAny
		}
	}
	return nil
}

func (x *NativeScript) GetScriptNOfK() *ScriptNOfK {
	if x != nil {
		if x, ok := x.NativeScript.(*NativeScript_ScriptNOfK); ok {
			return x.ScriptNOfK
		}
	}
	return nil
}

func (x *NativeScript) GetInvalidBefore() uint64 {
	if x != nil {
		if x, ok := x.NativeScript.(*NativeScript_InvalidBefore); ok {
			return x.InvalidBefore
		}
	}
	return 0
}

func (x *NativeScript) GetInvalidHereafter() uint64 {
	if x != nil {
		if x, ok := x.NativeScript.(*NativeScript_InvalidHereafter); ok {
			return x.InvalidHereafter
		}
	}
	return 0
}

type isNativeScript_NativeScript interface {
	isNativeScript_NativeScript()
}

type NativeScript_ScriptPubkey struct {
	ScriptPubkey []byte `protobuf:"bytes,1,opt,name=script_pubkey,json=scriptPubkey,proto3,oneof"` // Script based on an address key hash.
}

type NativeScript_ScriptAll struct {
	ScriptAll *NativeScriptList `protobuf:"bytes,2,opt,name=script_all,json=scriptAll,proto3,oneof"` // Script that requires all nested scripts to be satisfied.
}

type NativeScript_ScriptAny struct {
	ScriptAny *NativeScriptList `protobuf:"bytes,3,opt,name=script_any,json=scriptAny,proto3,oneof"` // Script that requires any of the nested scripts to be satisfied.
}

type NativeScript_ScriptNOfK struct {
	ScriptNOfK *ScriptNOfK `protobuf:"bytes,4,opt,name=script_n_of_k,json=scriptNOfK,proto3,oneof"` // Script that requires k out of n nested scripts to be satisfied.
}

type NativeScript_InvalidBefore struct {
	InvalidBefore uint64 `protobuf:"varint,5,opt,name=invalid_before,json=invalidBefore,proto3,oneof"` // Slot number before which the script is invalid.
}

type NativeScript_InvalidHereafter struct {
	InvalidHereafter uint64 `protobuf:"varint,6,opt,name=invalid_hereafter,json=invalidHereafter,proto3,oneof"` // Slot number after which the script is invalid.
}

func (*NativeScript_ScriptPubkey) isNativeScript_NativeScript() {}

func (*NativeScript_ScriptAll) isNativeScript_NativeScript() {}

func (*NativeScript_ScriptAny) isNativeScript_NativeScript() {}

func (*NativeScript_ScriptNOfK) isNativeScript_NativeScript() {}

func (*NativeScript_InvalidBefore) isNativeScript_NativeScript() {}

func (*NativeScript_InvalidHereafter) isNativeScript_NativeScript() {}

// Represents a list of native scripts.
type NativeScriptList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*NativeScript        `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"` // List of native scripts.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NativeScriptList) Reset() {
	*x = NativeScriptList{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NativeScriptList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeScriptList) ProtoMessage() {}

func (x *NativeScriptList) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeScriptList.ProtoReflect.Descriptor instead.
func (*NativeScriptList) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{29}
}

func (x *NativeScriptList) GetItems() []*NativeScript {
	if x != nil {
		return x.Items
	}
	return nil
}

// Represents a "k out of n" native script.
type ScriptNOfK struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	K             uint32                 `protobuf:"varint,1,opt,name=k,proto3" json:"k,omitempty"`            // The number of required satisfied scripts.
	Scripts       []*NativeScript        `protobuf:"bytes,2,rep,name=scripts,proto3" json:"scripts,omitempty"` // List of native scripts.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScriptNOfK) Reset() {
	*x = ScriptNOfK{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScriptNOfK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptNOfK) ProtoMessage() {}

func (x *ScriptNOfK) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptNOfK.ProtoReflect.Descriptor instead.
func (*ScriptNOfK) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{30}
}

func (x *ScriptNOfK) GetK() uint32 {
	if x != nil {
		return x.K
	}
	return 0
}

func (x *ScriptNOfK) GetScripts() []*NativeScript {
	if x != nil {
		return x.Scripts
	}
	return nil
}

// Represents a constructor for Plutus data in Cardano.
type Constr struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Tag            uint32                 `protobuf:"varint,1,opt,name=tag,proto3" json:"tag,omitempty"`
	AnyConstructor uint64                 `protobuf:"varint,2,opt,name=any_constructor,json=anyConstructor,proto3" json:"any_constructor,omitempty"`
	Fields         []*PlutusData          `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Constr) Reset() {
	*x = Constr{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Constr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Constr) ProtoMessage() {}

func (x *Constr) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Constr.ProtoReflect.Descriptor instead.
func (*Constr) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{31}
}

func (x *Constr) GetTag() uint32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *Constr) GetAnyConstructor() uint64 {
	if x != nil {
		return x.AnyConstructor
	}
	return 0
}

func (x *Constr) GetFields() []*PlutusData {
	if x != nil {
		return x.Fields
	}
	return nil
}

// Represents a big integer for Plutus data in Cardano.
type BigInt struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to BigInt:
	//
	//	*BigInt_Int
	//	*BigInt_BigUInt
	//	*BigInt_BigNInt
	BigInt        isBigInt_BigInt `protobuf_oneof:"big_int"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BigInt) Reset() {
	*x = BigInt{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BigInt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigInt) ProtoMessage() {}

func (x *BigInt) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigInt.ProtoReflect.Descriptor instead.
func (*BigInt) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{32}
}

func (x *BigInt) GetBigInt() isBigInt_BigInt {
	if x != nil {
		return x.BigInt
	}
	return nil
}

func (x *BigInt) GetInt() int64 {
	if x != nil {
		if x, ok := x.BigInt.(*BigInt_Int); ok {
			return x.Int
		}
	}
	return 0
}

func (x *BigInt) GetBigUInt() []byte {
	if x != nil {
		if x, ok := x.BigInt.(*BigInt_BigUInt); ok {
			return x.BigUInt
		}
	}
	return nil
}

func (x *BigInt) GetBigNInt() []byte {
	if x != nil {
		if x, ok := x.BigInt.(*BigInt_BigNInt); ok {
			return x.BigNInt
		}
	}
	return nil
}

type isBigInt_BigInt interface {
	isBigInt_BigInt()
}

type BigInt_Int struct {
	Int int64 `protobuf:"varint,1,opt,name=int,proto3,oneof"`
}

type BigInt_BigUInt struct {
	BigUInt []byte `protobuf:"bytes,2,opt,name=big_u_int,json=bigUInt,proto3,oneof"`
}

type BigInt_BigNInt struct {
	BigNInt []byte `protobuf:"bytes,3,opt,name=big_n_int,json=bigNInt,proto3,oneof"`
}

func (*BigInt_Int) isBigInt_BigInt() {}

func (*BigInt_BigUInt) isBigInt_BigInt() {}

func (*BigInt_BigNInt) isBigInt_BigInt() {}

// Represents a key-value pair for Plutus data in Cardano.
type PlutusDataPair struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           *PlutusData            `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`     // Key of the pair.
	Value         *PlutusData            `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"` // Value of the pair.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlutusDataPair) Reset() {
	*x = PlutusDataPair{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlutusDataPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlutusDataPair) ProtoMessage() {}

func (x *PlutusDataPair) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlutusDataPair.ProtoReflect.Descriptor instead.
func (*PlutusDataPair) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{33}
}

func (x *PlutusDataPair) GetKey() *PlutusData {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *PlutusDataPair) GetValue() *PlutusData {
	if x != nil {
		return x.Value
	}
	return nil
}

// Represents a Plutus data item in Cardano.
type PlutusData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to PlutusData:
	//
	//	*PlutusData_Constr
	//	*PlutusData_Map
	//	*PlutusData_BigInt
	//	*PlutusData_BoundedBytes
	//	*PlutusData_Array
	PlutusData    isPlutusData_PlutusData `protobuf_oneof:"plutus_data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlutusData) Reset() {
	*x = PlutusData{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlutusData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlutusData) ProtoMessage() {}

func (x *PlutusData) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlutusData.ProtoReflect.Descriptor instead.
func (*PlutusData) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{34}
}

func (x *PlutusData) GetPlutusData() isPlutusData_PlutusData {
	if x != nil {
		return x.PlutusData
	}
	return nil
}

func (x *PlutusData) GetConstr() *Constr {
	if x != nil {
		if x, ok := x.PlutusData.(*PlutusData_Constr); ok {
			return x.Constr
		}
	}
	return nil
}

func (x *PlutusData) GetMap() *PlutusDataMap {
	if x != nil {
		if x, ok := x.PlutusData.(*PlutusData_Map); ok {
			return x.Map
		}
	}
	return nil
}

func (x *PlutusData) GetBigInt() *BigInt {
	if x != nil {
		if x, ok := x.PlutusData.(*PlutusData_BigInt); ok {
			return x.BigInt
		}
	}
	return nil
}

func (x *PlutusData) GetBoundedBytes() []byte {
	if x != nil {
		if x, ok := x.PlutusData.(*PlutusData_BoundedBytes); ok {
			return x.BoundedBytes
		}
	}
	return nil
}

func (x *PlutusData) GetArray() *PlutusDataArray {
	if x != nil {
		if x, ok := x.PlutusData.(*PlutusData_Array); ok {
			return x.Array
		}
	}
	return nil
}

type isPlutusData_PlutusData interface {
	isPlutusData_PlutusData()
}

type PlutusData_Constr struct {
	Constr *Constr `protobuf:"bytes,2,opt,name=constr,proto3,oneof"` // Constructor.
}

type PlutusData_Map struct {
	Map *PlutusDataMap `protobuf:"bytes,3,opt,name=map,proto3,oneof"` // Map of Plutus data.
}

type PlutusData_BigInt struct {
	BigInt *BigInt `protobuf:"bytes,4,opt,name=big_int,json=bigInt,proto3,oneof"` // Big integer.
}

type PlutusData_BoundedBytes struct {
	BoundedBytes []byte `protobuf:"bytes,5,opt,name=bounded_bytes,json=boundedBytes,proto3,oneof"` // Bounded bytes.
}

type PlutusData_Array struct {
	Array *PlutusDataArray `protobuf:"bytes,6,opt,name=array,proto3,oneof"` // Array of Plutus data.
}

func (*PlutusData_Constr) isPlutusData_PlutusData() {}

func (*PlutusData_Map) isPlutusData_PlutusData() {}

func (*PlutusData_BigInt) isPlutusData_PlutusData() {}

func (*PlutusData_BoundedBytes) isPlutusData_PlutusData() {}

func (*PlutusData_Array) isPlutusData_PlutusData() {}

// Represents a map of Plutus data in Cardano.
type PlutusDataMap struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pairs         []*PlutusDataPair      `protobuf:"bytes,1,rep,name=pairs,proto3" json:"pairs,omitempty"` // List of key-value pairs.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlutusDataMap) Reset() {
	*x = PlutusDataMap{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlutusDataMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlutusDataMap) ProtoMessage() {}

func (x *PlutusDataMap) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlutusDataMap.ProtoReflect.Descriptor instead.
func (*PlutusDataMap) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{35}
}

func (x *PlutusDataMap) GetPairs() []*PlutusDataPair {
	if x != nil {
		return x.Pairs
	}
	return nil
}

// Represents an array of Plutus data in Cardano.
type PlutusDataArray struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*PlutusData          `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"` // List of Plutus data items.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlutusDataArray) Reset() {
	*x = PlutusDataArray{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlutusDataArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlutusDataArray) ProtoMessage() {}

func (x *PlutusDataArray) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlutusDataArray.ProtoReflect.Descriptor instead.
func (*PlutusDataArray) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{36}
}

func (x *PlutusDataArray) GetItems() []*PlutusData {
	if x != nil {
		return x.Items
	}
	return nil
}

// Represents a script in Cardano.
type Script struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Script:
	//
	//	*Script_Native
	//	*Script_PlutusV1
	//	*Script_PlutusV2
	//	*Script_PlutusV3
	Script        isScript_Script `protobuf_oneof:"script"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Script) Reset() {
	*x = Script{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Script) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Script) ProtoMessage() {}

func (x *Script) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Script.ProtoReflect.Descriptor instead.
func (*Script) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{37}
}

func (x *Script) GetScript() isScript_Script {
	if x != nil {
		return x.Script
	}
	return nil
}

func (x *Script) GetNative() *NativeScript {
	if x != nil {
		if x, ok := x.Script.(*Script_Native); ok {
			return x.Native
		}
	}
	return nil
}

func (x *Script) GetPlutusV1() []byte {
	if x != nil {
		if x, ok := x.Script.(*Script_PlutusV1); ok {
			return x.PlutusV1
		}
	}
	return nil
}

func (x *Script) GetPlutusV2() []byte {
	if x != nil {
		if x, ok := x.Script.(*Script_PlutusV2); ok {
			return x.PlutusV2
		}
	}
	return nil
}

func (x *Script) GetPlutusV3() []byte {
	if x != nil {
		if x, ok := x.Script.(*Script_PlutusV3); ok {
			return x.PlutusV3
		}
	}
	return nil
}

type isScript_Script interface {
	isScript_Script()
}

type Script_Native struct {
	Native *NativeScript `protobuf:"bytes,1,opt,name=native,proto3,oneof"` // Native script.
}

type Script_PlutusV1 struct {
	PlutusV1 []byte `protobuf:"bytes,2,opt,name=plutus_v1,json=plutusV1,proto3,oneof"` // Plutus V1 script.
}

type Script_PlutusV2 struct {
	PlutusV2 []byte `protobuf:"bytes,3,opt,name=plutus_v2,json=plutusV2,proto3,oneof"` // Plutus V2 script.
}

type Script_PlutusV3 struct {
	PlutusV3 []byte `protobuf:"bytes,4,opt,name=plutus_v3,json=plutusV3,proto3,oneof"` // Plutus V3 script.
}

func (*Script_Native) isScript_Script() {}

func (*Script_PlutusV1) isScript_Script() {}

func (*Script_PlutusV2) isScript_Script() {}

func (*Script_PlutusV3) isScript_Script() {}

type Metadatum struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Metadatum:
	//
	//	*Metadatum_Int
	//	*Metadatum_Bytes
	//	*Metadatum_Text
	//	*Metadatum_Array
	//	*Metadatum_Map
	Metadatum     isMetadatum_Metadatum `protobuf_oneof:"metadatum"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Metadatum) Reset() {
	*x = Metadatum{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metadatum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadatum) ProtoMessage() {}

func (x *Metadatum) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadatum.ProtoReflect.Descriptor instead.
func (*Metadatum) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{38}
}

func (x *Metadatum) GetMetadatum() isMetadatum_Metadatum {
	if x != nil {
		return x.Metadatum
	}
	return nil
}

func (x *Metadatum) GetInt() int64 {
	if x != nil {
		if x, ok := x.Metadatum.(*Metadatum_Int); ok {
			return x.Int
		}
	}
	return 0
}

func (x *Metadatum) GetBytes() []byte {
	if x != nil {
		if x, ok := x.Metadatum.(*Metadatum_Bytes); ok {
			return x.Bytes
		}
	}
	return nil
}

func (x *Metadatum) GetText() string {
	if x != nil {
		if x, ok := x.Metadatum.(*Metadatum_Text); ok {
			return x.Text
		}
	}
	return ""
}

func (x *Metadatum) GetArray() *MetadatumArray {
	if x != nil {
		if x, ok := x.Metadatum.(*Metadatum_Array); ok {
			return x.Array
		}
	}
	return nil
}

func (x *Metadatum) GetMap() *MetadatumMap {
	if x != nil {
		if x, ok := x.Metadatum.(*Metadatum_Map); ok {
			return x.Map
		}
	}
	return nil
}

type isMetadatum_Metadatum interface {
	isMetadatum_Metadatum()
}

type Metadatum_Int struct {
	Int int64 `protobuf:"varint,1,opt,name=int,proto3,oneof"`
}

type Metadatum_Bytes struct {
	Bytes []byte `protobuf:"bytes,2,opt,name=bytes,proto3,oneof"`
}

type Metadatum_Text struct {
	Text string `protobuf:"bytes,3,opt,name=text,proto3,oneof"`
}

type Metadatum_Array struct {
	Array *MetadatumArray `protobuf:"bytes,4,opt,name=array,proto3,oneof"`
}

type Metadatum_Map struct {
	Map *MetadatumMap `protobuf:"bytes,5,opt,name=map,proto3,oneof"`
}

func (*Metadatum_Int) isMetadatum_Metadatum() {}

func (*Metadatum_Bytes) isMetadatum_Metadatum() {}

func (*Metadatum_Text) isMetadatum_Metadatum() {}

func (*Metadatum_Array) isMetadatum_Metadatum() {}

func (*Metadatum_Map) isMetadatum_Metadatum() {}

type MetadatumArray struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Metadatum           `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetadatumArray) Reset() {
	*x = MetadatumArray{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadatumArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadatumArray) ProtoMessage() {}

func (x *MetadatumArray) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadatumArray.ProtoReflect.Descriptor instead.
func (*MetadatumArray) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{39}
}

func (x *MetadatumArray) GetItems() []*Metadatum {
	if x != nil {
		return x.Items
	}
	return nil
}

type MetadatumMap struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pairs         []*MetadatumPair       `protobuf:"bytes,1,rep,name=pairs,proto3" json:"pairs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetadatumMap) Reset() {
	*x = MetadatumMap{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadatumMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadatumMap) ProtoMessage() {}

func (x *MetadatumMap) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadatumMap.ProtoReflect.Descriptor instead.
func (*MetadatumMap) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{40}
}

func (x *MetadatumMap) GetPairs() []*MetadatumPair {
	if x != nil {
		return x.Pairs
	}
	return nil
}

type MetadatumPair struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           *Metadatum             `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         *Metadatum             `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetadatumPair) Reset() {
	*x = MetadatumPair{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadatumPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadatumPair) ProtoMessage() {}

func (x *MetadatumPair) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadatumPair.ProtoReflect.Descriptor instead.
func (*MetadatumPair) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{41}
}

func (x *MetadatumPair) GetKey() *Metadatum {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *MetadatumPair) GetValue() *Metadatum {
	if x != nil {
		return x.Value
	}
	return nil
}

type Metadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Label         uint64                 `protobuf:"varint,1,opt,name=label,proto3" json:"label,omitempty"`
	Value         *Metadatum             `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{42}
}

func (x *Metadata) GetLabel() uint64 {
	if x != nil {
		return x.Label
	}
	return 0
}

func (x *Metadata) GetValue() *Metadatum {
	if x != nil {
		return x.Value
	}
	return nil
}

// Represents a stake credential in Cardano.
type StakeCredential struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to StakeCredential:
	//
	//	*StakeCredential_AddrKeyHash
	//	*StakeCredential_ScriptHash
	StakeCredential isStakeCredential_StakeCredential `protobuf_oneof:"stake_credential"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *StakeCredential) Reset() {
	*x = StakeCredential{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StakeCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeCredential) ProtoMessage() {}

func (x *StakeCredential) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeCredential.ProtoReflect.Descriptor instead.
func (*StakeCredential) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{43}
}

func (x *StakeCredential) GetStakeCredential() isStakeCredential_StakeCredential {
	if x != nil {
		return x.StakeCredential
	}
	return nil
}

func (x *StakeCredential) GetAddrKeyHash() []byte {
	if x != nil {
		if x, ok := x.StakeCredential.(*StakeCredential_AddrKeyHash); ok {
			return x.AddrKeyHash
		}
	}
	return nil
}

func (x *StakeCredential) GetScriptHash() []byte {
	if x != nil {
		if x, ok := x.StakeCredential.(*StakeCredential_ScriptHash); ok {
			return x.ScriptHash
		}
	}
	return nil
}

type isStakeCredential_StakeCredential interface {
	isStakeCredential_StakeCredential()
}

type StakeCredential_AddrKeyHash struct {
	AddrKeyHash []byte `protobuf:"bytes,1,opt,name=addr_key_hash,json=addrKeyHash,proto3,oneof"` // Address key hash.
}

type StakeCredential_ScriptHash struct {
	ScriptHash []byte `protobuf:"bytes,2,opt,name=script_hash,json=scriptHash,proto3,oneof"` // Script hash.
}

func (*StakeCredential_AddrKeyHash) isStakeCredential_StakeCredential() {}

func (*StakeCredential_ScriptHash) isStakeCredential_StakeCredential() {}

// Represents a rational number as a fraction.
type RationalNumber struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Numerator     int32                  `protobuf:"varint,1,opt,name=numerator,proto3" json:"numerator,omitempty"`
	Denominator   uint32                 `protobuf:"varint,2,opt,name=denominator,proto3" json:"denominator,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RationalNumber) Reset() {
	*x = RationalNumber{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RationalNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RationalNumber) ProtoMessage() {}

func (x *RationalNumber) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RationalNumber.ProtoReflect.Descriptor instead.
func (*RationalNumber) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{44}
}

func (x *RationalNumber) GetNumerator() int32 {
	if x != nil {
		return x.Numerator
	}
	return 0
}

func (x *RationalNumber) GetDenominator() uint32 {
	if x != nil {
		return x.Denominator
	}
	return 0
}

// Represents a relay in Cardano.
type Relay struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IpV4          []byte                 `protobuf:"bytes,1,opt,name=ip_v4,json=ipV4,proto3" json:"ip_v4,omitempty"`
	IpV6          []byte                 `protobuf:"bytes,2,opt,name=ip_v6,json=ipV6,proto3" json:"ip_v6,omitempty"`
	DnsName       string                 `protobuf:"bytes,3,opt,name=dns_name,json=dnsName,proto3" json:"dns_name,omitempty"`
	Port          uint32                 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Relay) Reset() {
	*x = Relay{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Relay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Relay) ProtoMessage() {}

func (x *Relay) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Relay.ProtoReflect.Descriptor instead.
func (*Relay) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{45}
}

func (x *Relay) GetIpV4() []byte {
	if x != nil {
		return x.IpV4
	}
	return nil
}

func (x *Relay) GetIpV6() []byte {
	if x != nil {
		return x.IpV6
	}
	return nil
}

func (x *Relay) GetDnsName() string {
	if x != nil {
		return x.DnsName
	}
	return ""
}

func (x *Relay) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// Represents pool metadata in Cardano.
type PoolMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Hash          []byte                 `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PoolMetadata) Reset() {
	*x = PoolMetadata{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PoolMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolMetadata) ProtoMessage() {}

func (x *PoolMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolMetadata.ProtoReflect.Descriptor instead.
func (*PoolMetadata) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{46}
}

func (x *PoolMetadata) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PoolMetadata) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

// Represents a certificate in Cardano.
type Certificate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Certificate:
	//
	//	*Certificate_StakeRegistration
	//	*Certificate_StakeDeregistration
	//	*Certificate_StakeDelegation
	//	*Certificate_PoolRegistration
	//	*Certificate_PoolRetirement
	//	*Certificate_GenesisKeyDelegation
	//	*Certificate_MirCert
	//	*Certificate_RegCert
	//	*Certificate_UnregCert
	//	*Certificate_VoteDelegCert
	//	*Certificate_StakeVoteDelegCert
	//	*Certificate_StakeRegDelegCert
	//	*Certificate_VoteRegDelegCert
	//	*Certificate_StakeVoteRegDelegCert
	//	*Certificate_AuthCommitteeHotCert
	//	*Certificate_ResignCommitteeColdCert
	//	*Certificate_RegDrepCert
	//	*Certificate_UnregDrepCert
	//	*Certificate_UpdateDrepCert
	Certificate   isCertificate_Certificate `protobuf_oneof:"certificate"`
	Redeemer      *Redeemer                 `protobuf:"bytes,100,opt,name=redeemer,proto3" json:"redeemer,omitempty"` // Redeemer for the Plutus script.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Certificate) Reset() {
	*x = Certificate{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Certificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Certificate) ProtoMessage() {}

func (x *Certificate) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Certificate.ProtoReflect.Descriptor instead.
func (*Certificate) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{47}
}

func (x *Certificate) GetCertificate() isCertificate_Certificate {
	if x != nil {
		return x.Certificate
	}
	return nil
}

func (x *Certificate) GetStakeRegistration() *StakeCredential {
	if x != nil {
		if x, ok := x.Certificate.(*Certificate_StakeRegistration); ok {
			return x.StakeRegistration
		}
	}
	return nil
}

func (x *Certificate) GetStakeDeregistration() *StakeCredential {
	if x != nil {
		if x, ok := x.Certificate.(*Certificate_StakeDeregistration); ok {
			return x.StakeDeregistration
		}
	}
	return nil
}

func (x *Certificate) GetStakeDelegation() *StakeDelegationCert {
	if x != nil {
		if x, ok := x.Certificate.(*Certificate_StakeDelegation); ok {
			return x.StakeDelegation
		}
	}
	return nil
}

func (x *Certificate) GetPoolRegistration() *PoolRegistrationCert {
	if x != nil {
		if x, ok := x.Certificate.(*Certificate_PoolRegistration); ok {
			return x.PoolRegistration
		}
	}
	return nil
}

func (x *Certificate) GetPoolRetirement() *PoolRetirementCert {
	if x != nil {
		if x, ok := x.Certificate.(*Certificate_PoolRetirement); ok {
			return x.PoolRetirement
		}
	}
	return nil
}

func (x *Certificate) GetGenesisKeyDelegation() *GenesisKeyDelegationCert {
	if x != nil {
		if x, ok := x.Certificate.(*Certificate_GenesisKeyDelegation); ok {
			return x.GenesisKeyDelegation
		}
	}
	return nil
}

func (x *Certificate) GetMirCert() *MirCert {
	if x != nil {
		if x, ok := x.Certificate.(*Certificate_MirCert); ok {
			return x.MirCert
		}
	}
	return nil
}

func (x *Certificate) GetRegCert() *RegCert {
	if x != nil {
		if x, ok := x.Certificate.(*Certificate_RegCert); ok {
			return x.RegCert
		}
	}
	return nil
}

func (x *Certificate) GetUnregCert() *UnRegCert {
	if x != nil {
		if x, ok := x.Certificate.(*Certificate_UnregCert); ok {
			return x.UnregCert
		}
	}
	return nil
}

func (x *Certificate) GetVoteDelegCert() *VoteDelegCert {
	if x != nil {
		if x, ok := x.Certificate.(*Certificate_VoteDelegCert); ok {
			return x.VoteDelegCert
		}
	}
	return nil
}

func (x *Certificate) GetStakeVoteDelegCert() *StakeVoteDelegCert {
	if x != nil {
		if x, ok := x.Certificate.(*Certificate_StakeVoteDelegCert); ok {
			return x.StakeVoteDelegCert
		}
	}
	return nil
}

func (x *Certificate) GetStakeRegDelegCert() *StakeRegDelegCert {
	if x != nil {
		if x, ok := x.Certificate.(*Certificate_StakeRegDelegCert); ok {
			return x.StakeRegDelegCert
		}
	}
	return nil
}

func (x *Certificate) GetVoteRegDelegCert() *VoteRegDelegCert {
	if x != nil {
		if x, ok := x.Certificate.(*Certificate_VoteRegDelegCert); ok {
			return x.VoteRegDelegCert
		}
	}
	return nil
}

func (x *Certificate) GetStakeVoteRegDelegCert() *StakeVoteRegDelegCert {
	if x != nil {
		if x, ok := x.Certificate.(*Certificate_StakeVoteRegDelegCert); ok {
			return x.StakeVoteRegDelegCert
		}
	}
	return nil
}

func (x *Certificate) GetAuthCommitteeHotCert() *AuthCommitteeHotCert {
	if x != nil {
		if x, ok := x.Certificate.(*Certificate_AuthCommitteeHotCert); ok {
			return x.AuthCommitteeHotCert
		}
	}
	return nil
}

func (x *Certificate) GetResignCommitteeColdCert() *ResignCommitteeColdCert {
	if x != nil {
		if x, ok := x.Certificate.(*Certificate_ResignCommitteeColdCert); ok {
			return x.ResignCommitteeColdCert
		}
	}
	return nil
}

func (x *Certificate) GetRegDrepCert() *RegDRepCert {
	if x != nil {
		if x, ok := x.Certificate.(*Certificate_RegDrepCert); ok {
			return x.RegDrepCert
		}
	}
	return nil
}

func (x *Certificate) GetUnregDrepCert() *UnRegDRepCert {
	if x != nil {
		if x, ok := x.Certificate.(*Certificate_UnregDrepCert); ok {
			return x.UnregDrepCert
		}
	}
	return nil
}

func (x *Certificate) GetUpdateDrepCert() *UpdateDRepCert {
	if x != nil {
		if x, ok := x.Certificate.(*Certificate_UpdateDrepCert); ok {
			return x.UpdateDrepCert
		}
	}
	return nil
}

func (x *Certificate) GetRedeemer() *Redeemer {
	if x != nil {
		return x.Redeemer
	}
	return nil
}

type isCertificate_Certificate interface {
	isCertificate_Certificate()
}

type Certificate_StakeRegistration struct {
	StakeRegistration *StakeCredential `protobuf:"bytes,1,opt,name=stake_registration,json=stakeRegistration,proto3,oneof"` // Stake registration certificate.
}

type Certificate_StakeDeregistration struct {
	StakeDeregistration *StakeCredential `protobuf:"bytes,2,opt,name=stake_deregistration,json=stakeDeregistration,proto3,oneof"` // Stake deregistration certificate.
}

type Certificate_StakeDelegation struct {
	StakeDelegation *StakeDelegationCert `protobuf:"bytes,3,opt,name=stake_delegation,json=stakeDelegation,proto3,oneof"` // Stake delegation certificate.
}

type Certificate_PoolRegistration struct {
	PoolRegistration *PoolRegistrationCert `protobuf:"bytes,4,opt,name=pool_registration,json=poolRegistration,proto3,oneof"` // Pool registration certificate.
}

type Certificate_PoolRetirement struct {
	PoolRetirement *PoolRetirementCert `protobuf:"bytes,5,opt,name=pool_retirement,json=poolRetirement,proto3,oneof"` // Pool retirement certificate.
}

type Certificate_GenesisKeyDelegation struct {
	GenesisKeyDelegation *GenesisKeyDelegationCert `protobuf:"bytes,6,opt,name=genesis_key_delegation,json=genesisKeyDelegation,proto3,oneof"` // Genesis key delegation certificate.
}

type Certificate_MirCert struct {
	MirCert *MirCert `protobuf:"bytes,7,opt,name=mir_cert,json=mirCert,proto3,oneof"` // Move instantaneous rewards certificate.
}

type Certificate_RegCert struct {
	RegCert *RegCert `protobuf:"bytes,8,opt,name=reg_cert,json=regCert,proto3,oneof"` // Registration certificate.
}

type Certificate_UnregCert struct {
	UnregCert *UnRegCert `protobuf:"bytes,9,opt,name=unreg_cert,json=unregCert,proto3,oneof"` // Unregistration certificate.
}

type Certificate_VoteDelegCert struct {
	VoteDelegCert *VoteDelegCert `protobuf:"bytes,10,opt,name=vote_deleg_cert,json=voteDelegCert,proto3,oneof"` // Vote delegation certificate.
}

type Certificate_StakeVoteDelegCert struct {
	StakeVoteDelegCert *StakeVoteDelegCert `protobuf:"bytes,11,opt,name=stake_vote_deleg_cert,json=stakeVoteDelegCert,proto3,oneof"` // Stake and vote delegation certificate.
}

type Certificate_StakeRegDelegCert struct {
	StakeRegDelegCert *StakeRegDelegCert `protobuf:"bytes,12,opt,name=stake_reg_deleg_cert,json=stakeRegDelegCert,proto3,oneof"` // Stake registration and delegation certificate.
}

type Certificate_VoteRegDelegCert struct {
	VoteRegDelegCert *VoteRegDelegCert `protobuf:"bytes,13,opt,name=vote_reg_deleg_cert,json=voteRegDelegCert,proto3,oneof"` // Vote registration and delegation certificate.
}

type Certificate_StakeVoteRegDelegCert struct {
	StakeVoteRegDelegCert *StakeVoteRegDelegCert `protobuf:"bytes,14,opt,name=stake_vote_reg_deleg_cert,json=stakeVoteRegDelegCert,proto3,oneof"` // Stake and vote registration and delegation certificate.
}

type Certificate_AuthCommitteeHotCert struct {
	AuthCommitteeHotCert *AuthCommitteeHotCert `protobuf:"bytes,15,opt,name=auth_committee_hot_cert,json=authCommitteeHotCert,proto3,oneof"` // Authorize committee hot key certificate.
}

type Certificate_ResignCommitteeColdCert struct {
	ResignCommitteeColdCert *ResignCommitteeColdCert `protobuf:"bytes,16,opt,name=resign_committee_cold_cert,json=resignCommitteeColdCert,proto3,oneof"` // Resign committee cold key certificate.
}

type Certificate_RegDrepCert struct {
	RegDrepCert *RegDRepCert `protobuf:"bytes,17,opt,name=reg_drep_cert,json=regDrepCert,proto3,oneof"` // Register DRep certificate.
}

type Certificate_UnregDrepCert struct {
	UnregDrepCert *UnRegDRepCert `protobuf:"bytes,18,opt,name=unreg_drep_cert,json=unregDrepCert,proto3,oneof"` // Unregister DRep certificate.
}

type Certificate_UpdateDrepCert struct {
	UpdateDrepCert *UpdateDRepCert `protobuf:"bytes,19,opt,name=update_drep_cert,json=updateDrepCert,proto3,oneof"` // Update DRep certificate.
}

func (*Certificate_StakeRegistration) isCertificate_Certificate() {}

func (*Certificate_StakeDeregistration) isCertificate_Certificate() {}

func (*Certificate_StakeDelegation) isCertificate_Certificate() {}

func (*Certificate_PoolRegistration) isCertificate_Certificate() {}

func (*Certificate_PoolRetirement) isCertificate_Certificate() {}

func (*Certificate_GenesisKeyDelegation) isCertificate_Certificate() {}

func (*Certificate_MirCert) isCertificate_Certificate() {}

func (*Certificate_RegCert) isCertificate_Certificate() {}

func (*Certificate_UnregCert) isCertificate_Certificate() {}

func (*Certificate_VoteDelegCert) isCertificate_Certificate() {}

func (*Certificate_StakeVoteDelegCert) isCertificate_Certificate() {}

func (*Certificate_StakeRegDelegCert) isCertificate_Certificate() {}

func (*Certificate_VoteRegDelegCert) isCertificate_Certificate() {}

func (*Certificate_StakeVoteRegDelegCert) isCertificate_Certificate() {}

func (*Certificate_AuthCommitteeHotCert) isCertificate_Certificate() {}

func (*Certificate_ResignCommitteeColdCert) isCertificate_Certificate() {}

func (*Certificate_RegDrepCert) isCertificate_Certificate() {}

func (*Certificate_UnregDrepCert) isCertificate_Certificate() {}

func (*Certificate_UpdateDrepCert) isCertificate_Certificate() {}

// Represents a stake delegation certificate in Cardano.
type StakeDelegationCert struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	StakeCredential *StakeCredential       `protobuf:"bytes,1,opt,name=stake_credential,json=stakeCredential,proto3" json:"stake_credential,omitempty"` // Stake credential.
	PoolKeyhash     []byte                 `protobuf:"bytes,2,opt,name=pool_keyhash,json=poolKeyhash,proto3" json:"pool_keyhash,omitempty"`             // Pool key hash.
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *StakeDelegationCert) Reset() {
	*x = StakeDelegationCert{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StakeDelegationCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeDelegationCert) ProtoMessage() {}

func (x *StakeDelegationCert) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeDelegationCert.ProtoReflect.Descriptor instead.
func (*StakeDelegationCert) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{48}
}

func (x *StakeDelegationCert) GetStakeCredential() *StakeCredential {
	if x != nil {
		return x.StakeCredential
	}
	return nil
}

func (x *StakeDelegationCert) GetPoolKeyhash() []byte {
	if x != nil {
		return x.PoolKeyhash
	}
	return nil
}

// Represents a pool registration certificate in Cardano.
type PoolRegistrationCert struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Operator      []byte                 `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`                                // Operator key hash.
	VrfKeyhash    []byte                 `protobuf:"bytes,2,opt,name=vrf_keyhash,json=vrfKeyhash,proto3" json:"vrf_keyhash,omitempty"`          // VRF key hash.
	Pledge        uint64                 `protobuf:"varint,3,opt,name=pledge,proto3" json:"pledge,omitempty"`                                   // Pledge amount.
	Cost          uint64                 `protobuf:"varint,4,opt,name=cost,proto3" json:"cost,omitempty"`                                       // Pool cost.
	Margin        *RationalNumber        `protobuf:"bytes,5,opt,name=margin,proto3" json:"margin,omitempty"`                                    // Pool margin.
	RewardAccount []byte                 `protobuf:"bytes,6,opt,name=reward_account,json=rewardAccount,proto3" json:"reward_account,omitempty"` // Reward account.
	PoolOwners    [][]byte               `protobuf:"bytes,7,rep,name=pool_owners,json=poolOwners,proto3" json:"pool_owners,omitempty"`          // List of pool owner key hashes.
	Relays        []*Relay               `protobuf:"bytes,8,rep,name=relays,proto3" json:"relays,omitempty"`                                    // List of relays.
	PoolMetadata  *PoolMetadata          `protobuf:"bytes,9,opt,name=pool_metadata,json=poolMetadata,proto3" json:"pool_metadata,omitempty"`    // Pool metadata.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PoolRegistrationCert) Reset() {
	*x = PoolRegistrationCert{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PoolRegistrationCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolRegistrationCert) ProtoMessage() {}

func (x *PoolRegistrationCert) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolRegistrationCert.ProtoReflect.Descriptor instead.
func (*PoolRegistrationCert) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{49}
}

func (x *PoolRegistrationCert) GetOperator() []byte {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *PoolRegistrationCert) GetVrfKeyhash() []byte {
	if x != nil {
		return x.VrfKeyhash
	}
	return nil
}

func (x *PoolRegistrationCert) GetPledge() uint64 {
	if x != nil {
		return x.Pledge
	}
	return 0
}

func (x *PoolRegistrationCert) GetCost() uint64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *PoolRegistrationCert) GetMargin() *RationalNumber {
	if x != nil {
		return x.Margin
	}
	return nil
}

func (x *PoolRegistrationCert) GetRewardAccount() []byte {
	if x != nil {
		return x.RewardAccount
	}
	return nil
}

func (x *PoolRegistrationCert) GetPoolOwners() [][]byte {
	if x != nil {
		return x.PoolOwners
	}
	return nil
}

func (x *PoolRegistrationCert) GetRelays() []*Relay {
	if x != nil {
		return x.Relays
	}
	return nil
}

func (x *PoolRegistrationCert) GetPoolMetadata() *PoolMetadata {
	if x != nil {
		return x.PoolMetadata
	}
	return nil
}

// Represents a pool retirement certificate in Cardano.
type PoolRetirementCert struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PoolKeyhash   []byte                 `protobuf:"bytes,1,opt,name=pool_keyhash,json=poolKeyhash,proto3" json:"pool_keyhash,omitempty"` // Pool key hash.
	Epoch         uint64                 `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`                               // Retirement epoch.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PoolRetirementCert) Reset() {
	*x = PoolRetirementCert{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PoolRetirementCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolRetirementCert) ProtoMessage() {}

func (x *PoolRetirementCert) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolRetirementCert.ProtoReflect.Descriptor instead.
func (*PoolRetirementCert) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{50}
}

func (x *PoolRetirementCert) GetPoolKeyhash() []byte {
	if x != nil {
		return x.PoolKeyhash
	}
	return nil
}

func (x *PoolRetirementCert) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

// Represents a genesis key delegation certificate in Cardano.
type GenesisKeyDelegationCert struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	GenesisHash         []byte                 `protobuf:"bytes,1,opt,name=genesis_hash,json=genesisHash,proto3" json:"genesis_hash,omitempty"`                           // Genesis hash.
	GenesisDelegateHash []byte                 `protobuf:"bytes,2,opt,name=genesis_delegate_hash,json=genesisDelegateHash,proto3" json:"genesis_delegate_hash,omitempty"` // Genesis delegate hash.
	VrfKeyhash          []byte                 `protobuf:"bytes,3,opt,name=vrf_keyhash,json=vrfKeyhash,proto3" json:"vrf_keyhash,omitempty"`                              // VRF key hash.
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *GenesisKeyDelegationCert) Reset() {
	*x = GenesisKeyDelegationCert{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenesisKeyDelegationCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenesisKeyDelegationCert) ProtoMessage() {}

func (x *GenesisKeyDelegationCert) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenesisKeyDelegationCert.ProtoReflect.Descriptor instead.
func (*GenesisKeyDelegationCert) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{51}
}

func (x *GenesisKeyDelegationCert) GetGenesisHash() []byte {
	if x != nil {
		return x.GenesisHash
	}
	return nil
}

func (x *GenesisKeyDelegationCert) GetGenesisDelegateHash() []byte {
	if x != nil {
		return x.GenesisDelegateHash
	}
	return nil
}

func (x *GenesisKeyDelegationCert) GetVrfKeyhash() []byte {
	if x != nil {
		return x.VrfKeyhash
	}
	return nil
}

type MirTarget struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	StakeCredential *StakeCredential       `protobuf:"bytes,1,opt,name=stake_credential,json=stakeCredential,proto3" json:"stake_credential,omitempty"`
	DeltaCoin       int64                  `protobuf:"varint,2,opt,name=delta_coin,json=deltaCoin,proto3" json:"delta_coin,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MirTarget) Reset() {
	*x = MirTarget{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MirTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MirTarget) ProtoMessage() {}

func (x *MirTarget) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MirTarget.ProtoReflect.Descriptor instead.
func (*MirTarget) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{52}
}

func (x *MirTarget) GetStakeCredential() *StakeCredential {
	if x != nil {
		return x.StakeCredential
	}
	return nil
}

func (x *MirTarget) GetDeltaCoin() int64 {
	if x != nil {
		return x.DeltaCoin
	}
	return 0
}

// Represents a move instantaneous reward certificate in Cardano.
type MirCert struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	From          MirSource              `protobuf:"varint,1,opt,name=from,proto3,enum=utxorpc.v1alpha.cardano.MirSource" json:"from,omitempty"`
	To            []*MirTarget           `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty"`
	OtherPot      uint64                 `protobuf:"varint,3,opt,name=other_pot,json=otherPot,proto3" json:"other_pot,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MirCert) Reset() {
	*x = MirCert{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MirCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MirCert) ProtoMessage() {}

func (x *MirCert) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MirCert.ProtoReflect.Descriptor instead.
func (*MirCert) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{53}
}

func (x *MirCert) GetFrom() MirSource {
	if x != nil {
		return x.From
	}
	return MirSource_MIR_SOURCE_UNSPECIFIED
}

func (x *MirCert) GetTo() []*MirTarget {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *MirCert) GetOtherPot() uint64 {
	if x != nil {
		return x.OtherPot
	}
	return 0
}

type RegCert struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	StakeCredential *StakeCredential       `protobuf:"bytes,1,opt,name=stake_credential,json=stakeCredential,proto3" json:"stake_credential,omitempty"`
	Coin            uint64                 `protobuf:"varint,2,opt,name=coin,proto3" json:"coin,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RegCert) Reset() {
	*x = RegCert{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegCert) ProtoMessage() {}

func (x *RegCert) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegCert.ProtoReflect.Descriptor instead.
func (*RegCert) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{54}
}

func (x *RegCert) GetStakeCredential() *StakeCredential {
	if x != nil {
		return x.StakeCredential
	}
	return nil
}

func (x *RegCert) GetCoin() uint64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

type UnRegCert struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	StakeCredential *StakeCredential       `protobuf:"bytes,1,opt,name=stake_credential,json=stakeCredential,proto3" json:"stake_credential,omitempty"`
	Coin            uint64                 `protobuf:"varint,2,opt,name=coin,proto3" json:"coin,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UnRegCert) Reset() {
	*x = UnRegCert{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnRegCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnRegCert) ProtoMessage() {}

func (x *UnRegCert) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnRegCert.ProtoReflect.Descriptor instead.
func (*UnRegCert) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{55}
}

func (x *UnRegCert) GetStakeCredential() *StakeCredential {
	if x != nil {
		return x.StakeCredential
	}
	return nil
}

func (x *UnRegCert) GetCoin() uint64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

type DRep struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Drep:
	//
	//	*DRep_AddrKeyHash
	//	*DRep_ScriptHash
	//	*DRep_Abstain
	//	*DRep_NoConfidence
	Drep          isDRep_Drep `protobuf_oneof:"drep"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DRep) Reset() {
	*x = DRep{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DRep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DRep) ProtoMessage() {}

func (x *DRep) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DRep.ProtoReflect.Descriptor instead.
func (*DRep) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{56}
}

func (x *DRep) GetDrep() isDRep_Drep {
	if x != nil {
		return x.Drep
	}
	return nil
}

func (x *DRep) GetAddrKeyHash() []byte {
	if x != nil {
		if x, ok := x.Drep.(*DRep_AddrKeyHash); ok {
			return x.AddrKeyHash
		}
	}
	return nil
}

func (x *DRep) GetScriptHash() []byte {
	if x != nil {
		if x, ok := x.Drep.(*DRep_ScriptHash); ok {
			return x.ScriptHash
		}
	}
	return nil
}

func (x *DRep) GetAbstain() bool {
	if x != nil {
		if x, ok := x.Drep.(*DRep_Abstain); ok {
			return x.Abstain
		}
	}
	return false
}

func (x *DRep) GetNoConfidence() bool {
	if x != nil {
		if x, ok := x.Drep.(*DRep_NoConfidence); ok {
			return x.NoConfidence
		}
	}
	return false
}

type isDRep_Drep interface {
	isDRep_Drep()
}

type DRep_AddrKeyHash struct {
	AddrKeyHash []byte `protobuf:"bytes,1,opt,name=addr_key_hash,json=addrKeyHash,proto3,oneof"` // Address key hash
}

type DRep_ScriptHash struct {
	ScriptHash []byte `protobuf:"bytes,2,opt,name=script_hash,json=scriptHash,proto3,oneof"` // Script hash
}

type DRep_Abstain struct {
	Abstain bool `protobuf:"varint,3,opt,name=abstain,proto3,oneof"` // Abstain
}

type DRep_NoConfidence struct {
	NoConfidence bool `protobuf:"varint,4,opt,name=no_confidence,json=noConfidence,proto3,oneof"` // No confidence
}

func (*DRep_AddrKeyHash) isDRep_Drep() {}

func (*DRep_ScriptHash) isDRep_Drep() {}

func (*DRep_Abstain) isDRep_Drep() {}

func (*DRep_NoConfidence) isDRep_Drep() {}

type VoteDelegCert struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	StakeCredential *StakeCredential       `protobuf:"bytes,1,opt,name=stake_credential,json=stakeCredential,proto3" json:"stake_credential,omitempty"`
	Drep            *DRep                  `protobuf:"bytes,2,opt,name=drep,proto3" json:"drep,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *VoteDelegCert) Reset() {
	*x = VoteDelegCert{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VoteDelegCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteDelegCert) ProtoMessage() {}

func (x *VoteDelegCert) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteDelegCert.ProtoReflect.Descriptor instead.
func (*VoteDelegCert) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{57}
}

func (x *VoteDelegCert) GetStakeCredential() *StakeCredential {
	if x != nil {
		return x.StakeCredential
	}
	return nil
}

func (x *VoteDelegCert) GetDrep() *DRep {
	if x != nil {
		return x.Drep
	}
	return nil
}

type StakeVoteDelegCert struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	StakeCredential *StakeCredential       `protobuf:"bytes,1,opt,name=stake_credential,json=stakeCredential,proto3" json:"stake_credential,omitempty"`
	PoolKeyhash     []byte                 `protobuf:"bytes,2,opt,name=pool_keyhash,json=poolKeyhash,proto3" json:"pool_keyhash,omitempty"`
	Drep            *DRep                  `protobuf:"bytes,3,opt,name=drep,proto3" json:"drep,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *StakeVoteDelegCert) Reset() {
	*x = StakeVoteDelegCert{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StakeVoteDelegCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeVoteDelegCert) ProtoMessage() {}

func (x *StakeVoteDelegCert) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeVoteDelegCert.ProtoReflect.Descriptor instead.
func (*StakeVoteDelegCert) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{58}
}

func (x *StakeVoteDelegCert) GetStakeCredential() *StakeCredential {
	if x != nil {
		return x.StakeCredential
	}
	return nil
}

func (x *StakeVoteDelegCert) GetPoolKeyhash() []byte {
	if x != nil {
		return x.PoolKeyhash
	}
	return nil
}

func (x *StakeVoteDelegCert) GetDrep() *DRep {
	if x != nil {
		return x.Drep
	}
	return nil
}

type StakeRegDelegCert struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	StakeCredential *StakeCredential       `protobuf:"bytes,1,opt,name=stake_credential,json=stakeCredential,proto3" json:"stake_credential,omitempty"`
	PoolKeyhash     []byte                 `protobuf:"bytes,2,opt,name=pool_keyhash,json=poolKeyhash,proto3" json:"pool_keyhash,omitempty"`
	Coin            uint64                 `protobuf:"varint,3,opt,name=coin,proto3" json:"coin,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *StakeRegDelegCert) Reset() {
	*x = StakeRegDelegCert{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StakeRegDelegCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeRegDelegCert) ProtoMessage() {}

func (x *StakeRegDelegCert) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeRegDelegCert.ProtoReflect.Descriptor instead.
func (*StakeRegDelegCert) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{59}
}

func (x *StakeRegDelegCert) GetStakeCredential() *StakeCredential {
	if x != nil {
		return x.StakeCredential
	}
	return nil
}

func (x *StakeRegDelegCert) GetPoolKeyhash() []byte {
	if x != nil {
		return x.PoolKeyhash
	}
	return nil
}

func (x *StakeRegDelegCert) GetCoin() uint64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

type VoteRegDelegCert struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	StakeCredential *StakeCredential       `protobuf:"bytes,1,opt,name=stake_credential,json=stakeCredential,proto3" json:"stake_credential,omitempty"`
	Drep            *DRep                  `protobuf:"bytes,2,opt,name=drep,proto3" json:"drep,omitempty"`
	Coin            uint64                 `protobuf:"varint,3,opt,name=coin,proto3" json:"coin,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *VoteRegDelegCert) Reset() {
	*x = VoteRegDelegCert{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VoteRegDelegCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteRegDelegCert) ProtoMessage() {}

func (x *VoteRegDelegCert) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteRegDelegCert.ProtoReflect.Descriptor instead.
func (*VoteRegDelegCert) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{60}
}

func (x *VoteRegDelegCert) GetStakeCredential() *StakeCredential {
	if x != nil {
		return x.StakeCredential
	}
	return nil
}

func (x *VoteRegDelegCert) GetDrep() *DRep {
	if x != nil {
		return x.Drep
	}
	return nil
}

func (x *VoteRegDelegCert) GetCoin() uint64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

type StakeVoteRegDelegCert struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	StakeCredential *StakeCredential       `protobuf:"bytes,1,opt,name=stake_credential,json=stakeCredential,proto3" json:"stake_credential,omitempty"`
	PoolKeyhash     []byte                 `protobuf:"bytes,2,opt,name=pool_keyhash,json=poolKeyhash,proto3" json:"pool_keyhash,omitempty"`
	Drep            *DRep                  `protobuf:"bytes,3,opt,name=drep,proto3" json:"drep,omitempty"`
	Coin            uint64                 `protobuf:"varint,4,opt,name=coin,proto3" json:"coin,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *StakeVoteRegDelegCert) Reset() {
	*x = StakeVoteRegDelegCert{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StakeVoteRegDelegCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeVoteRegDelegCert) ProtoMessage() {}

func (x *StakeVoteRegDelegCert) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeVoteRegDelegCert.ProtoReflect.Descriptor instead.
func (*StakeVoteRegDelegCert) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{61}
}

func (x *StakeVoteRegDelegCert) GetStakeCredential() *StakeCredential {
	if x != nil {
		return x.StakeCredential
	}
	return nil
}

func (x *StakeVoteRegDelegCert) GetPoolKeyhash() []byte {
	if x != nil {
		return x.PoolKeyhash
	}
	return nil
}

func (x *StakeVoteRegDelegCert) GetDrep() *DRep {
	if x != nil {
		return x.Drep
	}
	return nil
}

func (x *StakeVoteRegDelegCert) GetCoin() uint64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

type AuthCommitteeHotCert struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	CommitteeColdCredential *StakeCredential       `protobuf:"bytes,1,opt,name=committee_cold_credential,json=committeeColdCredential,proto3" json:"committee_cold_credential,omitempty"`
	CommitteeHotCredential  *StakeCredential       `protobuf:"bytes,2,opt,name=committee_hot_credential,json=committeeHotCredential,proto3" json:"committee_hot_credential,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *AuthCommitteeHotCert) Reset() {
	*x = AuthCommitteeHotCert{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthCommitteeHotCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthCommitteeHotCert) ProtoMessage() {}

func (x *AuthCommitteeHotCert) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthCommitteeHotCert.ProtoReflect.Descriptor instead.
func (*AuthCommitteeHotCert) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{62}
}

func (x *AuthCommitteeHotCert) GetCommitteeColdCredential() *StakeCredential {
	if x != nil {
		return x.CommitteeColdCredential
	}
	return nil
}

func (x *AuthCommitteeHotCert) GetCommitteeHotCredential() *StakeCredential {
	if x != nil {
		return x.CommitteeHotCredential
	}
	return nil
}

type Anchor struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	ContentHash   []byte                 `protobuf:"bytes,2,opt,name=content_hash,json=contentHash,proto3" json:"content_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Anchor) Reset() {
	*x = Anchor{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Anchor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Anchor) ProtoMessage() {}

func (x *Anchor) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Anchor.ProtoReflect.Descriptor instead.
func (*Anchor) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{63}
}

func (x *Anchor) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Anchor) GetContentHash() []byte {
	if x != nil {
		return x.ContentHash
	}
	return nil
}

type ResignCommitteeColdCert struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	CommitteeColdCredential *StakeCredential       `protobuf:"bytes,1,opt,name=committee_cold_credential,json=committeeColdCredential,proto3" json:"committee_cold_credential,omitempty"`
	Anchor                  *Anchor                `protobuf:"bytes,2,opt,name=anchor,proto3" json:"anchor,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ResignCommitteeColdCert) Reset() {
	*x = ResignCommitteeColdCert{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResignCommitteeColdCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResignCommitteeColdCert) ProtoMessage() {}

func (x *ResignCommitteeColdCert) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResignCommitteeColdCert.ProtoReflect.Descriptor instead.
func (*ResignCommitteeColdCert) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{64}
}

func (x *ResignCommitteeColdCert) GetCommitteeColdCredential() *StakeCredential {
	if x != nil {
		return x.CommitteeColdCredential
	}
	return nil
}

func (x *ResignCommitteeColdCert) GetAnchor() *Anchor {
	if x != nil {
		return x.Anchor
	}
	return nil
}

type RegDRepCert struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	DrepCredential *StakeCredential       `protobuf:"bytes,1,opt,name=drep_credential,json=drepCredential,proto3" json:"drep_credential,omitempty"`
	Coin           uint64                 `protobuf:"varint,2,opt,name=coin,proto3" json:"coin,omitempty"`
	Anchor         *Anchor                `protobuf:"bytes,3,opt,name=anchor,proto3" json:"anchor,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RegDRepCert) Reset() {
	*x = RegDRepCert{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegDRepCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegDRepCert) ProtoMessage() {}

func (x *RegDRepCert) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegDRepCert.ProtoReflect.Descriptor instead.
func (*RegDRepCert) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{65}
}

func (x *RegDRepCert) GetDrepCredential() *StakeCredential {
	if x != nil {
		return x.DrepCredential
	}
	return nil
}

func (x *RegDRepCert) GetCoin() uint64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *RegDRepCert) GetAnchor() *Anchor {
	if x != nil {
		return x.Anchor
	}
	return nil
}

type UnRegDRepCert struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	DrepCredential *StakeCredential       `protobuf:"bytes,1,opt,name=drep_credential,json=drepCredential,proto3" json:"drep_credential,omitempty"`
	Coin           uint64                 `protobuf:"varint,2,opt,name=coin,proto3" json:"coin,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UnRegDRepCert) Reset() {
	*x = UnRegDRepCert{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnRegDRepCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnRegDRepCert) ProtoMessage() {}

func (x *UnRegDRepCert) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnRegDRepCert.ProtoReflect.Descriptor instead.
func (*UnRegDRepCert) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{66}
}

func (x *UnRegDRepCert) GetDrepCredential() *StakeCredential {
	if x != nil {
		return x.DrepCredential
	}
	return nil
}

func (x *UnRegDRepCert) GetCoin() uint64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

type UpdateDRepCert struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	DrepCredential *StakeCredential       `protobuf:"bytes,1,opt,name=drep_credential,json=drepCredential,proto3" json:"drep_credential,omitempty"`
	Anchor         *Anchor                `protobuf:"bytes,2,opt,name=anchor,proto3" json:"anchor,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UpdateDRepCert) Reset() {
	*x = UpdateDRepCert{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDRepCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDRepCert) ProtoMessage() {}

func (x *UpdateDRepCert) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDRepCert.ProtoReflect.Descriptor instead.
func (*UpdateDRepCert) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{67}
}

func (x *UpdateDRepCert) GetDrepCredential() *StakeCredential {
	if x != nil {
		return x.DrepCredential
	}
	return nil
}

func (x *UpdateDRepCert) GetAnchor() *Anchor {
	if x != nil {
		return x.Anchor
	}
	return nil
}

// Pattern of an address that can be used to evaluate matching predicates.
type AddressPattern struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ExactAddress   []byte                 `protobuf:"bytes,1,opt,name=exact_address,json=exactAddress,proto3" json:"exact_address,omitempty"`       // The address should match this exact address value.
	PaymentPart    []byte                 `protobuf:"bytes,2,opt,name=payment_part,json=paymentPart,proto3" json:"payment_part,omitempty"`          // The payment part of the address should match this value.
	DelegationPart []byte                 `protobuf:"bytes,3,opt,name=delegation_part,json=delegationPart,proto3" json:"delegation_part,omitempty"` // The delegation part of the address should match this value.
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AddressPattern) Reset() {
	*x = AddressPattern{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddressPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressPattern) ProtoMessage() {}

func (x *AddressPattern) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressPattern.ProtoReflect.Descriptor instead.
func (*AddressPattern) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{68}
}

func (x *AddressPattern) GetExactAddress() []byte {
	if x != nil {
		return x.ExactAddress
	}
	return nil
}

func (x *AddressPattern) GetPaymentPart() []byte {
	if x != nil {
		return x.PaymentPart
	}
	return nil
}

func (x *AddressPattern) GetDelegationPart() []byte {
	if x != nil {
		return x.DelegationPart
	}
	return nil
}

// Pattern of a native asset that can be used to evaluate matching predicates.
type AssetPattern struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PolicyId      []byte                 `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`    // The asset should belong to this policy id
	AssetName     []byte                 `protobuf:"bytes,2,opt,name=asset_name,json=assetName,proto3" json:"asset_name,omitempty"` // The asset should present this name
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssetPattern) Reset() {
	*x = AssetPattern{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetPattern) ProtoMessage() {}

func (x *AssetPattern) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetPattern.ProtoReflect.Descriptor instead.
func (*AssetPattern) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{69}
}

func (x *AssetPattern) GetPolicyId() []byte {
	if x != nil {
		return x.PolicyId
	}
	return nil
}

func (x *AssetPattern) GetAssetName() []byte {
	if x != nil {
		return x.AssetName
	}
	return nil
}

// Pattern of a tx output that can be used to evaluate matching predicates.
type TxOutputPattern struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       *AddressPattern        `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"` // Match any address in the output that exhibits this pattern.
	Asset         *AssetPattern          `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`     // Match any asset in the output that exhibits this pattern.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TxOutputPattern) Reset() {
	*x = TxOutputPattern{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxOutputPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxOutputPattern) ProtoMessage() {}

func (x *TxOutputPattern) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxOutputPattern.ProtoReflect.Descriptor instead.
func (*TxOutputPattern) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{70}
}

func (x *TxOutputPattern) GetAddress() *AddressPattern {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *TxOutputPattern) GetAsset() *AssetPattern {
	if x != nil {
		return x.Asset
	}
	return nil
}

// Pattern of a Tx that can be used to evaluate matching predicates.
type TxPattern struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Consumes      *TxOutputPattern       `protobuf:"bytes,1,opt,name=consumes,proto3" json:"consumes,omitempty"`                       // Match any input that exhibits this pattern.
	Produces      *TxOutputPattern       `protobuf:"bytes,2,opt,name=produces,proto3" json:"produces,omitempty"`                       // Match any output that exhibits this pattern.
	HasAddress    *AddressPattern        `protobuf:"bytes,3,opt,name=has_address,json=hasAddress,proto3" json:"has_address,omitempty"` // Match any address (inputs, outputs, collateral, etc) that exhibits this pattern.
	MovesAsset    *AssetPattern          `protobuf:"bytes,4,opt,name=moves_asset,json=movesAsset,proto3" json:"moves_asset,omitempty"` // Match any asset that exhibits this pattern.
	MintsAsset    *AssetPattern          `protobuf:"bytes,5,opt,name=mints_asset,json=mintsAsset,proto3" json:"mints_asset,omitempty"` // Match any tx that either mint or burn the the asset pattern.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TxPattern) Reset() {
	*x = TxPattern{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxPattern) ProtoMessage() {}

func (x *TxPattern) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxPattern.ProtoReflect.Descriptor instead.
func (*TxPattern) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{71}
}

func (x *TxPattern) GetConsumes() *TxOutputPattern {
	if x != nil {
		return x.Consumes
	}
	return nil
}

func (x *TxPattern) GetProduces() *TxOutputPattern {
	if x != nil {
		return x.Produces
	}
	return nil
}

func (x *TxPattern) GetHasAddress() *AddressPattern {
	if x != nil {
		return x.HasAddress
	}
	return nil
}

func (x *TxPattern) GetMovesAsset() *AssetPattern {
	if x != nil {
		return x.MovesAsset
	}
	return nil
}

func (x *TxPattern) GetMintsAsset() *AssetPattern {
	if x != nil {
		return x.MintsAsset
	}
	return nil
}

type ExUnits struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steps         uint64                 `protobuf:"varint,1,opt,name=steps,proto3" json:"steps,omitempty"`
	Memory        uint64                 `protobuf:"varint,2,opt,name=memory,proto3" json:"memory,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExUnits) Reset() {
	*x = ExUnits{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExUnits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExUnits) ProtoMessage() {}

func (x *ExUnits) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExUnits.ProtoReflect.Descriptor instead.
func (*ExUnits) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{72}
}

func (x *ExUnits) GetSteps() uint64 {
	if x != nil {
		return x.Steps
	}
	return 0
}

func (x *ExUnits) GetMemory() uint64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

type ExPrices struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steps         *RationalNumber        `protobuf:"bytes,1,opt,name=steps,proto3" json:"steps,omitempty"`
	Memory        *RationalNumber        `protobuf:"bytes,2,opt,name=memory,proto3" json:"memory,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExPrices) Reset() {
	*x = ExPrices{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExPrices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExPrices) ProtoMessage() {}

func (x *ExPrices) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExPrices.ProtoReflect.Descriptor instead.
func (*ExPrices) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{73}
}

func (x *ExPrices) GetSteps() *RationalNumber {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *ExPrices) GetMemory() *RationalNumber {
	if x != nil {
		return x.Memory
	}
	return nil
}

type ProtocolVersion struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Major         uint32                 `protobuf:"varint,1,opt,name=major,proto3" json:"major,omitempty"`
	Minor         uint32                 `protobuf:"varint,2,opt,name=minor,proto3" json:"minor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProtocolVersion) Reset() {
	*x = ProtocolVersion{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtocolVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolVersion) ProtoMessage() {}

func (x *ProtocolVersion) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolVersion.ProtoReflect.Descriptor instead.
func (*ProtocolVersion) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{74}
}

func (x *ProtocolVersion) GetMajor() uint32 {
	if x != nil {
		return x.Major
	}
	return 0
}

func (x *ProtocolVersion) GetMinor() uint32 {
	if x != nil {
		return x.Minor
	}
	return 0
}

type CostModel struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []int64                `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CostModel) Reset() {
	*x = CostModel{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CostModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostModel) ProtoMessage() {}

func (x *CostModel) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostModel.ProtoReflect.Descriptor instead.
func (*CostModel) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{75}
}

func (x *CostModel) GetValues() []int64 {
	if x != nil {
		return x.Values
	}
	return nil
}

type CostModels struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlutusV1      *CostModel             `protobuf:"bytes,1,opt,name=plutus_v1,json=plutusV1,proto3" json:"plutus_v1,omitempty"`
	PlutusV2      *CostModel             `protobuf:"bytes,2,opt,name=plutus_v2,json=plutusV2,proto3" json:"plutus_v2,omitempty"`
	PlutusV3      *CostModel             `protobuf:"bytes,3,opt,name=plutus_v3,json=plutusV3,proto3" json:"plutus_v3,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CostModels) Reset() {
	*x = CostModels{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CostModels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostModels) ProtoMessage() {}

func (x *CostModels) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostModels.ProtoReflect.Descriptor instead.
func (*CostModels) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{76}
}

func (x *CostModels) GetPlutusV1() *CostModel {
	if x != nil {
		return x.PlutusV1
	}
	return nil
}

func (x *CostModels) GetPlutusV2() *CostModel {
	if x != nil {
		return x.PlutusV2
	}
	return nil
}

func (x *CostModels) GetPlutusV3() *CostModel {
	if x != nil {
		return x.PlutusV3
	}
	return nil
}

type VotingThresholds struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Thresholds    []*RationalNumber      `protobuf:"bytes,1,rep,name=thresholds,proto3" json:"thresholds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VotingThresholds) Reset() {
	*x = VotingThresholds{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VotingThresholds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VotingThresholds) ProtoMessage() {}

func (x *VotingThresholds) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VotingThresholds.ProtoReflect.Descriptor instead.
func (*VotingThresholds) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{77}
}

func (x *VotingThresholds) GetThresholds() []*RationalNumber {
	if x != nil {
		return x.Thresholds
	}
	return nil
}

type PParams struct {
	state                           protoimpl.MessageState `protogen:"open.v1"`
	CoinsPerUtxoByte                uint64                 `protobuf:"varint,1,opt,name=coins_per_utxo_byte,json=coinsPerUtxoByte,proto3" json:"coins_per_utxo_byte,omitempty"`                                                // The number of coins per UTXO byte.
	MaxTxSize                       uint64                 `protobuf:"varint,2,opt,name=max_tx_size,json=maxTxSize,proto3" json:"max_tx_size,omitempty"`                                                                       // The maximum transaction size.
	MinFeeCoefficient               uint64                 `protobuf:"varint,3,opt,name=min_fee_coefficient,json=minFeeCoefficient,proto3" json:"min_fee_coefficient,omitempty"`                                               // The minimum fee coefficient.
	MinFeeConstant                  uint64                 `protobuf:"varint,4,opt,name=min_fee_constant,json=minFeeConstant,proto3" json:"min_fee_constant,omitempty"`                                                        // The minimum fee constant.
	MaxBlockBodySize                uint64                 `protobuf:"varint,5,opt,name=max_block_body_size,json=maxBlockBodySize,proto3" json:"max_block_body_size,omitempty"`                                                // The maximum block body size.
	MaxBlockHeaderSize              uint64                 `protobuf:"varint,6,opt,name=max_block_header_size,json=maxBlockHeaderSize,proto3" json:"max_block_header_size,omitempty"`                                          // The maximum block header size.
	StakeKeyDeposit                 uint64                 `protobuf:"varint,7,opt,name=stake_key_deposit,json=stakeKeyDeposit,proto3" json:"stake_key_deposit,omitempty"`                                                     // The stake key deposit.
	PoolDeposit                     uint64                 `protobuf:"varint,8,opt,name=pool_deposit,json=poolDeposit,proto3" json:"pool_deposit,omitempty"`                                                                   // The pool deposit.
	PoolRetirementEpochBound        uint64                 `protobuf:"varint,9,opt,name=pool_retirement_epoch_bound,json=poolRetirementEpochBound,proto3" json:"pool_retirement_epoch_bound,omitempty"`                        // The pool retirement epoch bound.
	DesiredNumberOfPools            uint64                 `protobuf:"varint,10,opt,name=desired_number_of_pools,json=desiredNumberOfPools,proto3" json:"desired_number_of_pools,omitempty"`                                   // The desired number of pools.
	PoolInfluence                   *RationalNumber        `protobuf:"bytes,11,opt,name=pool_influence,json=poolInfluence,proto3" json:"pool_influence,omitempty"`                                                             // The pool influence.
	MonetaryExpansion               *RationalNumber        `protobuf:"bytes,12,opt,name=monetary_expansion,json=monetaryExpansion,proto3" json:"monetary_expansion,omitempty"`                                                 // The monetary expansion.
	TreasuryExpansion               *RationalNumber        `protobuf:"bytes,13,opt,name=treasury_expansion,json=treasuryExpansion,proto3" json:"treasury_expansion,omitempty"`                                                 // The treasury expansion.
	MinPoolCost                     uint64                 `protobuf:"varint,14,opt,name=min_pool_cost,json=minPoolCost,proto3" json:"min_pool_cost,omitempty"`                                                                // The minimum pool cost.
	ProtocolVersion                 *ProtocolVersion       `protobuf:"bytes,15,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`                                                       // The protocol version.
	MaxValueSize                    uint64                 `protobuf:"varint,16,opt,name=max_value_size,json=maxValueSize,proto3" json:"max_value_size,omitempty"`                                                             // The maximum value size.
	CollateralPercentage            uint64                 `protobuf:"varint,17,opt,name=collateral_percentage,json=collateralPercentage,proto3" json:"collateral_percentage,omitempty"`                                       // The collateral percentage.
	MaxCollateralInputs             uint64                 `protobuf:"varint,18,opt,name=max_collateral_inputs,json=maxCollateralInputs,proto3" json:"max_collateral_inputs,omitempty"`                                        // The maximum collateral inputs.
	CostModels                      *CostModels            `protobuf:"bytes,19,opt,name=cost_models,json=costModels,proto3" json:"cost_models,omitempty"`                                                                      // The cost models.
	Prices                          *ExPrices              `protobuf:"bytes,20,opt,name=prices,proto3" json:"prices,omitempty"`                                                                                                // The prices.
	MaxExecutionUnitsPerTransaction *ExUnits               `protobuf:"bytes,21,opt,name=max_execution_units_per_transaction,json=maxExecutionUnitsPerTransaction,proto3" json:"max_execution_units_per_transaction,omitempty"` // The maximum execution units per transaction.
	MaxExecutionUnitsPerBlock       *ExUnits               `protobuf:"bytes,22,opt,name=max_execution_units_per_block,json=maxExecutionUnitsPerBlock,proto3" json:"max_execution_units_per_block,omitempty"`                   // The maximum execution units per block.
	MinFeeScriptRefCostPerByte      *RationalNumber        `protobuf:"bytes,23,opt,name=min_fee_script_ref_cost_per_byte,json=minFeeScriptRefCostPerByte,proto3" json:"min_fee_script_ref_cost_per_byte,omitempty"`            // The minimum fee per script reference byte.
	PoolVotingThresholds            *VotingThresholds      `protobuf:"bytes,24,opt,name=pool_voting_thresholds,json=poolVotingThresholds,proto3" json:"pool_voting_thresholds,omitempty"`                                      // The pool voting thresholds.
	DrepVotingThresholds            *VotingThresholds      `protobuf:"bytes,25,opt,name=drep_voting_thresholds,json=drepVotingThresholds,proto3" json:"drep_voting_thresholds,omitempty"`                                      // The drep voting thresholds.
	MinCommitteeSize                uint32                 `protobuf:"varint,26,opt,name=min_committee_size,json=minCommitteeSize,proto3" json:"min_committee_size,omitempty"`                                                 // The minimum committee size.
	CommitteeTermLimit              uint64                 `protobuf:"varint,27,opt,name=committee_term_limit,json=committeeTermLimit,proto3" json:"committee_term_limit,omitempty"`                                           // The committee term limit.
	GovernanceActionValidityPeriod  uint64                 `protobuf:"varint,28,opt,name=governance_action_validity_period,json=governanceActionValidityPeriod,proto3" json:"governance_action_validity_period,omitempty"`     // The governance action validity period.
	GovernanceActionDeposit         uint64                 `protobuf:"varint,29,opt,name=governance_action_deposit,json=governanceActionDeposit,proto3" json:"governance_action_deposit,omitempty"`                            // The governance action deposit.
	DrepDeposit                     uint64                 `protobuf:"varint,30,opt,name=drep_deposit,json=drepDeposit,proto3" json:"drep_deposit,omitempty"`                                                                  // The drep deposit.
	DrepInactivityPeriod            uint64                 `protobuf:"varint,31,opt,name=drep_inactivity_period,json=drepInactivityPeriod,proto3" json:"drep_inactivity_period,omitempty"`                                     // The drep inactivity period.
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *PParams) Reset() {
	*x = PParams{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PParams) ProtoMessage() {}

func (x *PParams) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PParams.ProtoReflect.Descriptor instead.
func (*PParams) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{78}
}

func (x *PParams) GetCoinsPerUtxoByte() uint64 {
	if x != nil {
		return x.CoinsPerUtxoByte
	}
	return 0
}

func (x *PParams) GetMaxTxSize() uint64 {
	if x != nil {
		return x.MaxTxSize
	}
	return 0
}

func (x *PParams) GetMinFeeCoefficient() uint64 {
	if x != nil {
		return x.MinFeeCoefficient
	}
	return 0
}

func (x *PParams) GetMinFeeConstant() uint64 {
	if x != nil {
		return x.MinFeeConstant
	}
	return 0
}

func (x *PParams) GetMaxBlockBodySize() uint64 {
	if x != nil {
		return x.MaxBlockBodySize
	}
	return 0
}

func (x *PParams) GetMaxBlockHeaderSize() uint64 {
	if x != nil {
		return x.MaxBlockHeaderSize
	}
	return 0
}

func (x *PParams) GetStakeKeyDeposit() uint64 {
	if x != nil {
		return x.StakeKeyDeposit
	}
	return 0
}

func (x *PParams) GetPoolDeposit() uint64 {
	if x != nil {
		return x.PoolDeposit
	}
	return 0
}

func (x *PParams) GetPoolRetirementEpochBound() uint64 {
	if x != nil {
		return x.PoolRetirementEpochBound
	}
	return 0
}

func (x *PParams) GetDesiredNumberOfPools() uint64 {
	if x != nil {
		return x.DesiredNumberOfPools
	}
	return 0
}

func (x *PParams) GetPoolInfluence() *RationalNumber {
	if x != nil {
		return x.PoolInfluence
	}
	return nil
}

func (x *PParams) GetMonetaryExpansion() *RationalNumber {
	if x != nil {
		return x.MonetaryExpansion
	}
	return nil
}

func (x *PParams) GetTreasuryExpansion() *RationalNumber {
	if x != nil {
		return x.TreasuryExpansion
	}
	return nil
}

func (x *PParams) GetMinPoolCost() uint64 {
	if x != nil {
		return x.MinPoolCost
	}
	return 0
}

func (x *PParams) GetProtocolVersion() *ProtocolVersion {
	if x != nil {
		return x.ProtocolVersion
	}
	return nil
}

func (x *PParams) GetMaxValueSize() uint64 {
	if x != nil {
		return x.MaxValueSize
	}
	return 0
}

func (x *PParams) GetCollateralPercentage() uint64 {
	if x != nil {
		return x.CollateralPercentage
	}
	return 0
}

func (x *PParams) GetMaxCollateralInputs() uint64 {
	if x != nil {
		return x.MaxCollateralInputs
	}
	return 0
}

func (x *PParams) GetCostModels() *CostModels {
	if x != nil {
		return x.CostModels
	}
	return nil
}

func (x *PParams) GetPrices() *ExPrices {
	if x != nil {
		return x.Prices
	}
	return nil
}

func (x *PParams) GetMaxExecutionUnitsPerTransaction() *ExUnits {
	if x != nil {
		return x.MaxExecutionUnitsPerTransaction
	}
	return nil
}

func (x *PParams) GetMaxExecutionUnitsPerBlock() *ExUnits {
	if x != nil {
		return x.MaxExecutionUnitsPerBlock
	}
	return nil
}

func (x *PParams) GetMinFeeScriptRefCostPerByte() *RationalNumber {
	if x != nil {
		return x.MinFeeScriptRefCostPerByte
	}
	return nil
}

func (x *PParams) GetPoolVotingThresholds() *VotingThresholds {
	if x != nil {
		return x.PoolVotingThresholds
	}
	return nil
}

func (x *PParams) GetDrepVotingThresholds() *VotingThresholds {
	if x != nil {
		return x.DrepVotingThresholds
	}
	return nil
}

func (x *PParams) GetMinCommitteeSize() uint32 {
	if x != nil {
		return x.MinCommitteeSize
	}
	return 0
}

func (x *PParams) GetCommitteeTermLimit() uint64 {
	if x != nil {
		return x.CommitteeTermLimit
	}
	return 0
}

func (x *PParams) GetGovernanceActionValidityPeriod() uint64 {
	if x != nil {
		return x.GovernanceActionValidityPeriod
	}
	return 0
}

func (x *PParams) GetGovernanceActionDeposit() uint64 {
	if x != nil {
		return x.GovernanceActionDeposit
	}
	return 0
}

func (x *PParams) GetDrepDeposit() uint64 {
	if x != nil {
		return x.DrepDeposit
	}
	return 0
}

func (x *PParams) GetDrepInactivityPeriod() uint64 {
	if x != nil {
		return x.DrepInactivityPeriod
	}
	return 0
}

type EvalError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Msg           string                 `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EvalError) Reset() {
	*x = EvalError{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EvalError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvalError) ProtoMessage() {}

func (x *EvalError) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvalError.ProtoReflect.Descriptor instead.
func (*EvalError) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{79}
}

func (x *EvalError) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type EvalTrace struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Msg           string                 `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EvalTrace) Reset() {
	*x = EvalTrace{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EvalTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvalTrace) ProtoMessage() {}

func (x *EvalTrace) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvalTrace.ProtoReflect.Descriptor instead.
func (*EvalTrace) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{80}
}

func (x *EvalTrace) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type TxEval struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fee           uint64                 `protobuf:"varint,1,opt,name=fee,proto3" json:"fee,omitempty"`
	ExUnits       *ExUnits               `protobuf:"bytes,2,opt,name=ex_units,json=exUnits,proto3" json:"ex_units,omitempty"`
	Errors        []*EvalError           `protobuf:"bytes,3,rep,name=errors,proto3" json:"errors,omitempty"`
	Traces        []*EvalTrace           `protobuf:"bytes,4,rep,name=traces,proto3" json:"traces,omitempty"`
	Redeemers     []*Redeemer            `protobuf:"bytes,5,rep,name=redeemers,proto3" json:"redeemers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TxEval) Reset() {
	*x = TxEval{}
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxEval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxEval) ProtoMessage() {}

func (x *TxEval) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxEval.ProtoReflect.Descriptor instead.
func (*TxEval) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{81}
}

func (x *TxEval) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *TxEval) GetExUnits() *ExUnits {
	if x != nil {
		return x.ExUnits
	}
	return nil
}

func (x *TxEval) GetErrors() []*EvalError {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *TxEval) GetTraces() []*EvalTrace {
	if x != nil {
		return x.Traces
	}
	return nil
}

func (x *TxEval) GetRedeemers() []*Redeemer {
	if x != nil {
		return x.Redeemers
	}
	return nil
}

var File_utxorpc_v1alpha_cardano_cardano_proto protoreflect.FileDescriptor

var file_utxorpc_v1alpha_cardano_cardano_proto_rawDesc = []byte{
	0x0a, 0x25, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f,
	0x22, 0x85, 0x02, 0x0a, 0x08, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x72, 0x12, 0x42, 0x0a,
	0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28,
	0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65,
	0x72, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x52, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73,
	0x65, 0x12, 0x3d, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x50, 0x6c, 0x75,
	0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3b, 0x0a, 0x08, 0x65, 0x78, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61,
	0x6e, 0x6f, 0x2e, 0x45, 0x78, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x07, 0x65, 0x78, 0x55, 0x6e,
	0x69, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x63, 0x62, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x43, 0x62, 0x6f, 0x72, 0x22, 0xc4, 0x01, 0x0a, 0x07, 0x54, 0x78, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a,
	0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x3e, 0x0a, 0x09, 0x61, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x54, 0x78,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x08, 0x61, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x12, 0x3d, 0x0a, 0x08, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x52, 0x65, 0x64,
	0x65, 0x65, 0x6d, 0x65, 0x72, 0x52, 0x08, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x72, 0x22,
	0xe4, 0x01, 0x0a, 0x08, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x3b, 0x0a, 0x06, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x75, 0x74, 0x78,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72,
	0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x61, 0x73, 0x73, 0x65, 0x74, 0x52,
	0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x75, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f,
	0x2e, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x52, 0x05, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x12, 0x37, 0x0a,
	0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x06,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x7f, 0x0a, 0x05, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x12, 0x3d, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x50,
	0x6c, 0x75, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x63,
	0x62, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x43, 0x62, 0x6f, 0x72, 0x22, 0x59, 0x0a, 0x05, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x63,
	0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x74, 0x43, 0x6f,
	0x69, 0x6e, 0x22, 0xa0, 0x01, 0x0a, 0x0a, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x36,
	0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x06,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x08, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61,
	0x6e, 0x6f, 0x2e, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x72, 0x52, 0x08, 0x72, 0x65, 0x64,
	0x65, 0x65, 0x6d, 0x65, 0x72, 0x22, 0x34, 0x0a, 0x0a, 0x54, 0x78, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x22, 0xc9, 0x01, 0x0a, 0x0a,
	0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x40, 0x0a, 0x0a, 0x63, 0x6f,
	0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x54, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x4e, 0x0a, 0x11,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e,
	0x6f, 0x2e, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x6c,
	0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x29, 0x0a, 0x10,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6c,
	0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x22, 0x86, 0x01, 0x0a, 0x0a, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x63, 0x6f, 0x69,
	0x6e, 0x12, 0x3d, 0x0a, 0x08, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x52, 0x65,
	0x64, 0x65, 0x65, 0x6d, 0x65, 0x72, 0x52, 0x08, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x72,
	0x22, 0xd7, 0x01, 0x0a, 0x0a, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x65, 0x74, 0x12,
	0x46, 0x0a, 0x0b, 0x76, 0x6b, 0x65, 0x79, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x56,
	0x4b, 0x65, 0x79, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x0b, 0x76, 0x6b, 0x65, 0x79,
	0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e,
	0x6f, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x12, 0x48, 0x0a, 0x0d, 0x70, 0x6c, 0x75, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x75, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e,
	0x6f, 0x2e, 0x50, 0x6c, 0x75, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x70, 0x6c,
	0x75, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x07, 0x41,
	0x75, 0x78, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61,
	0x6e, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f,
	0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x07, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73,
	0x22, 0xb2, 0x06, 0x0a, 0x02, 0x54, 0x78, 0x12, 0x38, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e,
	0x6f, 0x2e, 0x54, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x12, 0x3b, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x54, 0x78, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x48,
	0x0a, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x6c, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x12,
	0x37, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x54, 0x78, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x09, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61,
	0x6e, 0x6f, 0x2e, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x65, 0x74, 0x52, 0x09, 0x77,
	0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c,
	0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x75,
	0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x10, 0x0a,
	0x03, 0x66, 0x65, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12,
	0x3f, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x54, 0x78, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c,
	0x12, 0x3e, 0x0a, 0x09, 0x61, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x41, 0x75,
	0x78, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x61, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x12, 0x4f, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e,
	0x6f, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x73, 0x22, 0xde, 0x01, 0x0a, 0x18, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x0a, 0x67, 0x6f, 0x76, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e,
	0x6f, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x67, 0x6f, 0x76, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a,
	0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x06,
	0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x22, 0xd3, 0x05, 0x0a, 0x10, 0x47, 0x6f, 0x76, 0x65, 0x72,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x17, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x75,
	0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x72, 0x0a, 0x1b, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x66, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x75, 0x74, 0x78,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72,
	0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x18, 0x68, 0x61, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x74, 0x0a, 0x1b, 0x74, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x79, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x19, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x5f, 0x0a, 0x14, 0x6e, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x4e, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x6e, 0x6f,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x68, 0x0a, 0x17, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x17, 0x6e, 0x65,
	0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x75, 0x74,
	0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15, 0x6e,
	0x65, 0x77, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x66,
	0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x67, 0x6f, 0x76, 0x65, 0x72,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x73, 0x0a, 0x12,
	0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x67, 0x6f, 0x76,
	0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x67, 0x6f, 0x76, 0x65,
	0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0xdf, 0x01, 0x0a, 0x15, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0d, 0x67,
	0x6f, 0x76, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x47, 0x6f, 0x76,
	0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52,
	0x0b, 0x67, 0x6f, 0x76, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x15,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75, 0x74,
	0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x50, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x13, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48,
	0x61, 0x73, 0x68, 0x22, 0xc0, 0x01, 0x0a, 0x18, 0x48, 0x61, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x6b,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x4f, 0x0a, 0x0d, 0x67, 0x6f, 0x76, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e,
	0x6f, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x52, 0x0b, 0x67, 0x6f, 0x76, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x53, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x74,
	0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x19, 0x54, 0x72, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x79, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x75, 0x74, 0x78, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x61, 0x6e, 0x6f, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x61,
	0x73, 0x68, 0x22, 0x4d, 0x0a, 0x10, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x63, 0x6f, 0x69,
	0x6e, 0x22, 0x65, 0x0a, 0x12, 0x4e, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0d, 0x67, 0x6f, 0x76, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x0b, 0x67, 0x6f, 0x76,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xa3, 0x03, 0x0a, 0x15, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0d, 0x67, 0x6f, 0x76, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x75, 0x74, 0x78, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x61, 0x6e, 0x6f, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x0b, 0x67, 0x6f, 0x76, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x6a, 0x0a, 0x1c, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x74, 0x78, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x61, 0x6e, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x1a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12,
	0x6c, 0x0a, 0x19, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x4e, 0x65, 0x77,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x52, 0x17, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x5f, 0x0a,
	0x17, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x15, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0xb3,
	0x01, 0x0a, 0x15, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0d, 0x67, 0x6f, 0x76, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x0b, 0x67, 0x6f,
	0x76, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x69,
	0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5b, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x41,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x22, 0xa4, 0x01, 0x0a, 0x17, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x64, 0x0a,
	0x19, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x64, 0x5f,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x17, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x65, 0x43, 0x6f, 0x6c, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x22, 0x4d, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x38, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x42, 0x6f, 0x64, 0x79, 0x12, 0x2b, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x54, 0x78, 0x52, 0x02, 0x74,
	0x78, 0x22, 0x7d, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3c, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x75, 0x74, 0x78,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72,
	0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x22, 0x3f, 0x0a, 0x0b, 0x56, 0x4b, 0x65, 0x79, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x76, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x76,
	0x6b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x22, 0x80, 0x03, 0x0a, 0x0c, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x12, 0x25, 0x0a, 0x0d, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x70, 0x75, 0x62,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x4a, 0x0a, 0x0a, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x09, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x4a, 0x0a, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f,
	0x61, 0x6e, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x75, 0x74, 0x78, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x61, 0x6e, 0x6f, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x09, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x41, 0x6e,
	0x79, 0x12, 0x48, 0x0a, 0x0d, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x6e, 0x5f, 0x6f, 0x66,
	0x5f, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61,
	0x6e, 0x6f, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x4f, 0x66, 0x4b, 0x48, 0x00, 0x52,
	0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x4f, 0x66, 0x4b, 0x12, 0x27, 0x0a, 0x0e, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x11, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f,
	0x68, 0x65, 0x72, 0x65, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x00, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x48, 0x65, 0x72, 0x65, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x22, 0x4f, 0x0a, 0x10, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e,
	0x6f, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x5b, 0x0a, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e,
	0x4f, 0x66, 0x4b, 0x12, 0x0c, 0x0a, 0x01, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01,
	0x6b, 0x12, 0x3f, 0x0a, 0x07, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x4e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x07, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12,
	0x27, 0x0a, 0x0f, 0x61, 0x6e, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61,
	0x6e, 0x6f, 0x2e, 0x50, 0x6c, 0x75, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x63, 0x0a, 0x06, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x03, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x03,
	0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x69, 0x67, 0x5f, 0x75, 0x5f, 0x69, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x62, 0x69, 0x67, 0x55, 0x49, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x69, 0x67, 0x5f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x62, 0x69, 0x67, 0x4e, 0x49, 0x6e, 0x74, 0x42,
	0x09, 0x0a, 0x07, 0x62, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x22, 0x82, 0x01, 0x0a, 0x0e, 0x50,
	0x6c, 0x75, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x69, 0x72, 0x12, 0x35, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x75, 0x74, 0x78,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72,
	0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x50, 0x6c, 0x75, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x50, 0x6c,
	0x75, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xb7, 0x02, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x39,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x48,
	0x00, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x12, 0x3a, 0x0a, 0x03, 0x6d, 0x61, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f,
	0x2e, 0x50, 0x6c, 0x75, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x48, 0x00,
	0x52, 0x03, 0x6d, 0x61, 0x70, 0x12, 0x3a, 0x0a, 0x07, 0x62, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f,
	0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x06, 0x62, 0x69, 0x67, 0x49, 0x6e,
	0x74, 0x12, 0x25, 0x0a, 0x0d, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x05, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e,
	0x6f, 0x2e, 0x50, 0x6c, 0x75, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x48, 0x00, 0x52, 0x05, 0x61, 0x72, 0x72, 0x61, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x70, 0x6c,
	0x75, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4e, 0x0a, 0x0d, 0x50, 0x6c, 0x75,
	0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61,
	0x69, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x75, 0x74, 0x78, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x61, 0x6e, 0x6f, 0x2e, 0x50, 0x6c, 0x75, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61,
	0x69, 0x72, 0x52, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x22, 0x4c, 0x0a, 0x0f, 0x50, 0x6c, 0x75,
	0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x39, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x75, 0x74,
	0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x50, 0x6c, 0x75, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xb0, 0x01, 0x0a, 0x06, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x4e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x70, 0x6c, 0x75, 0x74, 0x75, 0x73, 0x5f, 0x76, 0x31,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6c, 0x75, 0x74, 0x75, 0x73,
	0x56, 0x31, 0x12, 0x1d, 0x0a, 0x09, 0x70, 0x6c, 0x75, 0x74, 0x75, 0x73, 0x5f, 0x76, 0x32, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6c, 0x75, 0x74, 0x75, 0x73, 0x56,
	0x32, 0x12, 0x1d, 0x0a, 0x09, 0x70, 0x6c, 0x75, 0x74, 0x75, 0x73, 0x5f, 0x76, 0x33, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6c, 0x75, 0x74, 0x75, 0x73, 0x56, 0x33,
	0x42, 0x08, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0xd6, 0x01, 0x0a, 0x09, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x03, 0x69, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x03, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x05,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3f, 0x0a, 0x05, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x75, 0x74, 0x78, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x61, 0x6e, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x48, 0x00, 0x52, 0x05, 0x61, 0x72, 0x72, 0x61, 0x79, 0x12, 0x39, 0x0a, 0x03, 0x6d,
	0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61,
	0x6e, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x48,
	0x00, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x42, 0x0b, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x75, 0x6d, 0x22, 0x4a, 0x0a, 0x0e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x75, 0x6d,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0x4c, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x12,
	0x3c, 0x0a, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x75, 0x6d, 0x50, 0x61, 0x69, 0x72, 0x52, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x22, 0x7f, 0x0a,
	0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x50, 0x61, 0x69, 0x72, 0x12, 0x34,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75, 0x74,
	0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5a,
	0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x75, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6e, 0x0a, 0x0f, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x24, 0x0a,
	0x0d, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x4b, 0x65, 0x79, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x48, 0x61, 0x73, 0x68, 0x42, 0x12, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x50, 0x0a, 0x0e, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x60, 0x0a, 0x05,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x70, 0x5f, 0x76, 0x34, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x69, 0x70, 0x56, 0x34, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x70,
	0x5f, 0x76, 0x36, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x69, 0x70, 0x56, 0x36, 0x12,
	0x19, 0x0a, 0x08, 0x64, 0x6e, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x34,
	0x0a, 0x0c, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x22, 0xfb, 0x0d, 0x0a, 0x0b, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x12, 0x59, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x11, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x5d, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x64, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x13, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x44, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59,
	0x0a, 0x10, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61,
	0x6e, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x11, 0x70, 0x6f, 0x6f,
	0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x50,
	0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x10, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x0f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f,
	0x72, 0x65, 0x74, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x74, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52,
	0x0e, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x74, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x69, 0x0a, 0x16, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69,
	0x73, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65,
	0x72, 0x74, 0x48, 0x00, 0x52, 0x14, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x4b, 0x65, 0x79,
	0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x69,
	0x72, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75,
	0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x4d, 0x69, 0x72, 0x43, 0x65, 0x72, 0x74, 0x48, 0x00,
	0x52, 0x07, 0x6d, 0x69, 0x72, 0x43, 0x65, 0x72, 0x74, 0x12, 0x3d, 0x0a, 0x08, 0x72, 0x65, 0x67,
	0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75, 0x74,
	0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x52, 0x65, 0x67, 0x43, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52,
	0x07, 0x72, 0x65, 0x67, 0x43, 0x65, 0x72, 0x74, 0x12, 0x43, 0x0a, 0x0a, 0x75, 0x6e, 0x72, 0x65,
	0x67, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75,
	0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x55, 0x6e, 0x52, 0x65, 0x67, 0x43, 0x65, 0x72, 0x74,
	0x48, 0x00, 0x52, 0x09, 0x75, 0x6e, 0x72, 0x65, 0x67, 0x43, 0x65, 0x72, 0x74, 0x12, 0x50, 0x0a,
	0x0f, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x5f, 0x63, 0x65, 0x72, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f,
	0x2e, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x43, 0x65, 0x72, 0x74, 0x48, 0x00,
	0x52, 0x0d, 0x76, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x43, 0x65, 0x72, 0x74, 0x12,
	0x60, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x67, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x56, 0x6f,
	0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x43, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x12, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x43, 0x65, 0x72,
	0x74, 0x12, 0x5d, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x67, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52,
	0x65, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x43, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x11, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x43, 0x65, 0x72, 0x74,
	0x12, 0x5a, 0x0a, 0x13, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x5f, 0x64, 0x65, 0x6c,
	0x65, 0x67, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x67, 0x44,
	0x65, 0x6c, 0x65, 0x67, 0x43, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x10, 0x76, 0x6f, 0x74, 0x65,
	0x52, 0x65, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x43, 0x65, 0x72, 0x74, 0x12, 0x6a, 0x0a, 0x19,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x67, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x56,
	0x6f, 0x74, 0x65, 0x52, 0x65, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x43, 0x65, 0x72, 0x74, 0x48,
	0x00, 0x52, 0x15, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x67, 0x44,
	0x65, 0x6c, 0x65, 0x67, 0x43, 0x65, 0x72, 0x74, 0x12, 0x66, 0x0a, 0x17, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x5f, 0x68, 0x6f, 0x74, 0x5f, 0x63,
	0x65, 0x72, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x75, 0x74, 0x78, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x61, 0x6e, 0x6f, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x65, 0x48, 0x6f, 0x74, 0x43, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x14, 0x61, 0x75, 0x74, 0x68,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x48, 0x6f, 0x74, 0x43, 0x65, 0x72, 0x74,
	0x12, 0x6f, 0x0a, 0x1a, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x52,
	0x65, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x43, 0x6f,
	0x6c, 0x64, 0x43, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x17, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x43, 0x6f, 0x6c, 0x64, 0x43, 0x65, 0x72,
	0x74, 0x12, 0x4a, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x5f, 0x64, 0x72, 0x65, 0x70, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61,
	0x6e, 0x6f, 0x2e, 0x52, 0x65, 0x67, 0x44, 0x52, 0x65, 0x70, 0x43, 0x65, 0x72, 0x74, 0x48, 0x00,
	0x52, 0x0b, 0x72, 0x65, 0x67, 0x44, 0x72, 0x65, 0x70, 0x43, 0x65, 0x72, 0x74, 0x12, 0x50, 0x0a,
	0x0f, 0x75, 0x6e, 0x72, 0x65, 0x67, 0x5f, 0x64, 0x72, 0x65, 0x70, 0x5f, 0x63, 0x65, 0x72, 0x74,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f,
	0x2e, 0x55, 0x6e, 0x52, 0x65, 0x67, 0x44, 0x52, 0x65, 0x70, 0x43, 0x65, 0x72, 0x74, 0x48, 0x00,
	0x52, 0x0d, 0x75, 0x6e, 0x72, 0x65, 0x67, 0x44, 0x72, 0x65, 0x70, 0x43, 0x65, 0x72, 0x74, 0x12,
	0x53, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x72, 0x65, 0x70, 0x5f, 0x63,
	0x65, 0x72, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x75, 0x74, 0x78, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x61, 0x6e, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x52, 0x65, 0x70, 0x43, 0x65,
	0x72, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x72, 0x65, 0x70,
	0x43, 0x65, 0x72, 0x74, 0x12, 0x3d, 0x0a, 0x08, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x72,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f,
	0x2e, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x72, 0x52, 0x08, 0x72, 0x65, 0x64, 0x65, 0x65,
	0x6d, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x12, 0x53, 0x0a, 0x10, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0f,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x70, 0x6f, 0x6f, 0x6c, 0x4b, 0x65, 0x79, 0x68, 0x61,
	0x73, 0x68, 0x22, 0x8c, 0x03, 0x0a, 0x14, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x72, 0x66, 0x5f, 0x6b,
	0x65, 0x79, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x76, 0x72,
	0x66, 0x4b, 0x65, 0x79, 0x68, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x63, 0x6f, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x0a, 0x70, 0x6f, 0x6f, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x36, 0x0a,
	0x06, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x06, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75,
	0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x0c, 0x70, 0x6f, 0x6f, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x4d, 0x0a, 0x12, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x74, 0x69, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x6f, 0x6c, 0x5f,
	0x6b, 0x65, 0x79, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x70,
	0x6f, 0x6f, 0x6c, 0x4b, 0x65, 0x79, 0x68, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x22, 0x92, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x4b, 0x65, 0x79, 0x44,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x32, 0x0a, 0x15, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x13, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x72, 0x66, 0x5f, 0x6b, 0x65, 0x79, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x76, 0x72, 0x66, 0x4b, 0x65,
	0x79, 0x68, 0x61, 0x73, 0x68, 0x22, 0x7f, 0x0a, 0x09, 0x4d, 0x69, 0x72, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x53, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75,
	0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x43, 0x6f, 0x69, 0x6e, 0x22, 0x92, 0x01, 0x0a, 0x07, 0x4d, 0x69, 0x72, 0x43, 0x65,
	0x72, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x4d, 0x69, 0x72, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x32, 0x0a, 0x02, 0x74, 0x6f,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f,
	0x2e, 0x4d, 0x69, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x1b,
	0x0a, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x6f, 0x74, 0x22, 0x72, 0x0a, 0x07, 0x52,
	0x65, 0x67, 0x43, 0x65, 0x72, 0x74, 0x12, 0x53, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x22,
	0x74, 0x0a, 0x09, 0x55, 0x6e, 0x52, 0x65, 0x67, 0x43, 0x65, 0x72, 0x74, 0x12, 0x53, 0x0a, 0x10,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f,
	0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x63, 0x6f, 0x69, 0x6e, 0x22, 0x9a, 0x01, 0x0a, 0x04, 0x44, 0x52, 0x65, 0x70, 0x12, 0x24,
	0x0a, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x4b, 0x65, 0x79,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x74, 0x61,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x61, 0x62, 0x73, 0x74,
	0x61, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0d, 0x6e, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c, 0x6e, 0x6f,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x72,
	0x65, 0x70, 0x22, 0x97, 0x01, 0x0a, 0x0d, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x43, 0x65, 0x72, 0x74, 0x12, 0x53, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x72, 0x65,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e,
	0x6f, 0x2e, 0x44, 0x52, 0x65, 0x70, 0x52, 0x04, 0x64, 0x72, 0x65, 0x70, 0x22, 0xbf, 0x01, 0x0a,
	0x12, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x43,
	0x65, 0x72, 0x74, 0x12, 0x53, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x6f, 0x6c,
	0x5f, 0x6b, 0x65, 0x79, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x70, 0x6f, 0x6f, 0x6c, 0x4b, 0x65, 0x79, 0x68, 0x61, 0x73, 0x68, 0x12, 0x31, 0x0a, 0x04, 0x64,
	0x72, 0x65, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x75, 0x74, 0x78, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x61, 0x6e, 0x6f, 0x2e, 0x44, 0x52, 0x65, 0x70, 0x52, 0x04, 0x64, 0x72, 0x65, 0x70, 0x22, 0x9f,
	0x01, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x43, 0x65, 0x72, 0x74, 0x12, 0x53, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x6f,
	0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x70, 0x6f, 0x6f, 0x6c, 0x4b, 0x65, 0x79, 0x68, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e,
	0x22, 0xae, 0x01, 0x0a, 0x10, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x67, 0x44, 0x65, 0x6c, 0x65,
	0x67, 0x43, 0x65, 0x72, 0x74, 0x12, 0x53, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x72,
	0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61,
	0x6e, 0x6f, 0x2e, 0x44, 0x52, 0x65, 0x70, 0x52, 0x04, 0x64, 0x72, 0x65, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x63, 0x6f, 0x69,
	0x6e, 0x22, 0xd6, 0x01, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x43, 0x65, 0x72, 0x74, 0x12, 0x53, 0x0a, 0x10, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x0f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x70, 0x6f, 0x6f, 0x6c, 0x4b, 0x65, 0x79, 0x68,
	0x61, 0x73, 0x68, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x72, 0x65, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x44, 0x52, 0x65, 0x70,
	0x52, 0x04, 0x64, 0x72, 0x65, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x22, 0xe0, 0x01, 0x0a, 0x14, 0x41,
	0x75, 0x74, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x48, 0x6f, 0x74, 0x43,
	0x65, 0x72, 0x74, 0x12, 0x64, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65,
	0x5f, 0x63, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f,
	0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x43, 0x6f, 0x6c, 0x64, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x62, 0x0a, 0x18, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x5f, 0x68, 0x6f, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x74,
	0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65,
	0x48, 0x6f, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x3d, 0x0a,
	0x06, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x22, 0xb8, 0x01, 0x0a,
	0x17, 0x52, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65,
	0x43, 0x6f, 0x6c, 0x64, 0x43, 0x65, 0x72, 0x74, 0x12, 0x64, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x74,
	0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65,
	0x43, 0x6f, 0x6c, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x37,
	0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52,
	0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x22, 0xad, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x67, 0x44,
	0x52, 0x65, 0x70, 0x43, 0x65, 0x72, 0x74, 0x12, 0x51, 0x0a, 0x0f, 0x64, 0x72, 0x65, 0x70, 0x5f,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0e, 0x64, 0x72, 0x65, 0x70,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x37,
	0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52,
	0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x22, 0x76, 0x0a, 0x0d, 0x55, 0x6e, 0x52, 0x65, 0x67,
	0x44, 0x52, 0x65, 0x70, 0x43, 0x65, 0x72, 0x74, 0x12, 0x51, 0x0a, 0x0f, 0x64, 0x72, 0x65, 0x70,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0e, 0x64, 0x72, 0x65,
	0x70, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x22,
	0x9c, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x52, 0x65, 0x70, 0x43, 0x65,
	0x72, 0x74, 0x12, 0x51, 0x0a, 0x0f, 0x64, 0x72, 0x65, 0x70, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x74,
	0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0e, 0x64, 0x72, 0x65, 0x70, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x37, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e,
	0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x22, 0x81,
	0x01, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x65, 0x78, 0x61, 0x63, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x72, 0x74, 0x22, 0x4a, 0x0a, 0x0c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x91,
	0x01, 0x0a, 0x0f, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x12, 0x41, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3b, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x05, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x22, 0xf1, 0x02, 0x0a, 0x09, 0x54, 0x78, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x12, 0x44, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x54, 0x78, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x08, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61,
	0x6e, 0x6f, 0x2e, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0b,
	0x68, 0x61, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x46, 0x0a, 0x0b, 0x6d, 0x6f, 0x76, 0x65, 0x73, 0x5f,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x74,
	0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x52, 0x0a, 0x6d, 0x6f, 0x76, 0x65, 0x73, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x46,
	0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x74,
	0x73, 0x41, 0x73, 0x73, 0x65, 0x74, 0x22, 0x37, 0x0a, 0x07, 0x45, 0x78, 0x55, 0x6e, 0x69, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x22,
	0x8a, 0x01, 0x0a, 0x08, 0x45, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x05,
	0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x75, 0x74,
	0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x12, 0x3f, 0x0a, 0x06, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x75, 0x74,
	0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x22, 0x3d, 0x0a, 0x0f,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x22, 0x23, 0x0a, 0x09, 0x43,
	0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x22, 0xcf, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12,
	0x3f, 0x0a, 0x09, 0x70, 0x6c, 0x75, 0x74, 0x75, 0x73, 0x5f, 0x76, 0x31, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x43, 0x6f, 0x73,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x08, 0x70, 0x6c, 0x75, 0x74, 0x75, 0x73, 0x56, 0x31,
	0x12, 0x3f, 0x0a, 0x09, 0x70, 0x6c, 0x75, 0x74, 0x75, 0x73, 0x5f, 0x76, 0x32, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x43, 0x6f,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x08, 0x70, 0x6c, 0x75, 0x74, 0x75, 0x73, 0x56,
	0x32, 0x12, 0x3f, 0x0a, 0x09, 0x70, 0x6c, 0x75, 0x74, 0x75, 0x73, 0x5f, 0x76, 0x33, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x43,
	0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x08, 0x70, 0x6c, 0x75, 0x74, 0x75, 0x73,
	0x56, 0x33, 0x22, 0x5b, 0x0a, 0x10, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x12, 0x47, 0x0a, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x75, 0x74, 0x78,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72,
	0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x22,
	0xa7, 0x0f, 0x0a, 0x07, 0x50, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x63,
	0x6f, 0x69, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x74, 0x78, 0x6f, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x50,
	0x65, 0x72, 0x55, 0x74, 0x78, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x61,
	0x78, 0x5f, 0x74, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x6d, 0x61, 0x78, 0x54, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x69,
	0x6e, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x46, 0x65, 0x65, 0x43,
	0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x69,
	0x6e, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x6f, 0x64, 0x79, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x6f, 0x6f, 0x6c, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x72, 0x65,
	0x74, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x70, 0x6f, 0x6f, 0x6c,
	0x52, 0x65, 0x74, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x4e, 0x0a, 0x0e, 0x70,
	0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0d, 0x70, 0x6f,
	0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x12, 0x6d,
	0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e,
	0x6f, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x11, 0x6d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x12, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f,
	0x65, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x11, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x79, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x6d,
	0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12,
	0x53, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x74, 0x78, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x61, 0x6e, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x61,
	0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x63, 0x6f,
	0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x32, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13,
	0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61,
	0x6e, 0x6f, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x0a, 0x63,
	0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x39, 0x0a, 0x06, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x75, 0x74, 0x78, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x61, 0x6e, 0x6f, 0x2e, 0x45, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x52, 0x06, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x6e, 0x0a, 0x23, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x45, 0x78, 0x55, 0x6e,
	0x69, 0x74, 0x73, 0x52, 0x1f, 0x6d, 0x61, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x50, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x1d, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75, 0x74,
	0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x45, 0x78, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x19, 0x6d,
	0x61, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73,
	0x50, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x6d, 0x0a, 0x20, 0x6d, 0x69, 0x6e, 0x5f,
	0x66, 0x65, 0x65, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x63,
	0x6f, 0x73, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x1a, 0x6d, 0x69, 0x6e,
	0x46, 0x65, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x66, 0x43, 0x6f, 0x73, 0x74,
	0x50, 0x65, 0x72, 0x42, 0x79, 0x74, 0x65, 0x12, 0x5f, 0x0a, 0x16, 0x70, 0x6f, 0x6f, 0x6c, 0x5f,
	0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e,
	0x6f, 0x2e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x73, 0x52, 0x14, 0x70, 0x6f, 0x6f, 0x6c, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x12, 0x5f, 0x0a, 0x16, 0x64, 0x72, 0x65, 0x70,
	0x5f, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61,
	0x6e, 0x6f, 0x2e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x73, 0x52, 0x14, 0x64, 0x72, 0x65, 0x70, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x6e,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x65, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65,
	0x54, 0x65, 0x72, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x49, 0x0a, 0x21, 0x67, 0x6f, 0x76,
	0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x1e, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x72, 0x65, 0x70, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x64, 0x72, 0x65, 0x70, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x72, 0x65, 0x70, 0x5f, 0x69, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x14, 0x64, 0x72, 0x65, 0x70, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x1d, 0x0a, 0x09, 0x45, 0x76, 0x61,
	0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x1d, 0x0a, 0x09, 0x45, 0x76, 0x61, 0x6c,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x90, 0x02, 0x0a, 0x06, 0x54, 0x78, 0x45, 0x76,
	0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x66, 0x65, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x65, 0x78, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f,
	0x2e, 0x45, 0x78, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x07, 0x65, 0x78, 0x55, 0x6e, 0x69, 0x74,
	0x73, 0x12, 0x3a, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x45, 0x76, 0x61, 0x6c,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x3a, 0x0a,
	0x06, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x52, 0x06, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x72, 0x65, 0x64,
	0x65, 0x65, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x75,
	0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x72, 0x52,
	0x09, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x72, 0x73, 0x2a, 0xdb, 0x01, 0x0a, 0x0f, 0x52,
	0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x72, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x20,
	0x0a, 0x1c, 0x52, 0x45, 0x44, 0x45, 0x45, 0x4d, 0x45, 0x52, 0x5f, 0x50, 0x55, 0x52, 0x50, 0x4f,
	0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x44, 0x45, 0x45, 0x4d, 0x45, 0x52, 0x5f, 0x50, 0x55, 0x52,
	0x50, 0x4f, 0x53, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15,
	0x52, 0x45, 0x44, 0x45, 0x45, 0x4d, 0x45, 0x52, 0x5f, 0x50, 0x55, 0x52, 0x50, 0x4f, 0x53, 0x45,
	0x5f, 0x4d, 0x49, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x44, 0x45, 0x45,
	0x4d, 0x45, 0x52, 0x5f, 0x50, 0x55, 0x52, 0x50, 0x4f, 0x53, 0x45, 0x5f, 0x43, 0x45, 0x52, 0x54,
	0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x44, 0x45, 0x45, 0x4d, 0x45, 0x52, 0x5f, 0x50,
	0x55, 0x52, 0x50, 0x4f, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x04, 0x12,
	0x19, 0x0a, 0x15, 0x52, 0x45, 0x44, 0x45, 0x45, 0x4d, 0x45, 0x52, 0x5f, 0x50, 0x55, 0x52, 0x50,
	0x4f, 0x53, 0x45, 0x5f, 0x56, 0x4f, 0x54, 0x45, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45,
	0x44, 0x45, 0x45, 0x4d, 0x45, 0x52, 0x5f, 0x50, 0x55, 0x52, 0x50, 0x4f, 0x53, 0x45, 0x5f, 0x50,
	0x52, 0x4f, 0x50, 0x4f, 0x53, 0x45, 0x10, 0x06, 0x2a, 0x59, 0x0a, 0x09, 0x4d, 0x69, 0x72, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x49, 0x52, 0x5f, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x49, 0x52, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x53, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x49,
	0x52, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x52, 0x45, 0x41, 0x53, 0x55, 0x52,
	0x59, 0x10, 0x02, 0x42, 0xe0, 0x01, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x75, 0x74, 0x78, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x61, 0x6e, 0x6f, 0x42, 0x0c, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2f, 0x67, 0x6f, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x67,
	0x65, 0x6e, 0x2f, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0xa2, 0x02, 0x03, 0x55, 0x56, 0x43,
	0xaa, 0x02, 0x17, 0x55, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0xca, 0x02, 0x17, 0x55, 0x74, 0x78,
	0x6f, 0x72, 0x70, 0x63, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5c, 0x43, 0x61, 0x72,
	0x64, 0x61, 0x6e, 0x6f, 0xe2, 0x02, 0x23, 0x55, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x5c, 0x56,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5c, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x19, 0x55, 0x74, 0x78,
	0x6f, 0x72, 0x70, 0x63, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x3a, 0x3a, 0x43,
	0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_utxorpc_v1alpha_cardano_cardano_proto_rawDescOnce sync.Once
	file_utxorpc_v1alpha_cardano_cardano_proto_rawDescData = file_utxorpc_v1alpha_cardano_cardano_proto_rawDesc
)

func file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP() []byte {
	file_utxorpc_v1alpha_cardano_cardano_proto_rawDescOnce.Do(func() {
		file_utxorpc_v1alpha_cardano_cardano_proto_rawDescData = protoimpl.X.CompressGZIP(file_utxorpc_v1alpha_cardano_cardano_proto_rawDescData)
	})
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescData
}

var file_utxorpc_v1alpha_cardano_cardano_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes = make([]protoimpl.MessageInfo, 82)
var file_utxorpc_v1alpha_cardano_cardano_proto_goTypes = []any{
	(RedeemerPurpose)(0),              // 0: utxorpc.v1alpha.cardano.RedeemerPurpose
	(MirSource)(0),                    // 1: utxorpc.v1alpha.cardano.MirSource
	(*Redeemer)(nil),                  // 2: utxorpc.v1alpha.cardano.Redeemer
	(*TxInput)(nil),                   // 3: utxorpc.v1alpha.cardano.TxInput
	(*TxOutput)(nil),                  // 4: utxorpc.v1alpha.cardano.TxOutput
	(*Datum)(nil),                     // 5: utxorpc.v1alpha.cardano.Datum
	(*Asset)(nil),                     // 6: utxorpc.v1alpha.cardano.Asset
	(*Multiasset)(nil),                // 7: utxorpc.v1alpha.cardano.Multiasset
	(*TxValidity)(nil),                // 8: utxorpc.v1alpha.cardano.TxValidity
	(*Collateral)(nil),                // 9: utxorpc.v1alpha.cardano.Collateral
	(*Withdrawal)(nil),                // 10: utxorpc.v1alpha.cardano.Withdrawal
	(*WitnessSet)(nil),                // 11: utxorpc.v1alpha.cardano.WitnessSet
	(*AuxData)(nil),                   // 12: utxorpc.v1alpha.cardano.AuxData
	(*Tx)(nil),                        // 13: utxorpc.v1alpha.cardano.Tx
	(*GovernanceActionProposal)(nil),  // 14: utxorpc.v1alpha.cardano.GovernanceActionProposal
	(*GovernanceAction)(nil),          // 15: utxorpc.v1alpha.cardano.GovernanceAction
	(*GovernanceActionId)(nil),        // 16: utxorpc.v1alpha.cardano.GovernanceActionId
	(*ParameterChangeAction)(nil),     // 17: utxorpc.v1alpha.cardano.ParameterChangeAction
	(*HardForkInitiationAction)(nil),  // 18: utxorpc.v1alpha.cardano.HardForkInitiationAction
	(*TreasuryWithdrawalsAction)(nil), // 19: utxorpc.v1alpha.cardano.TreasuryWithdrawalsAction
	(*WithdrawalAmount)(nil),          // 20: utxorpc.v1alpha.cardano.WithdrawalAmount
	(*NoConfidenceAction)(nil),        // 21: utxorpc.v1alpha.cardano.NoConfidenceAction
	(*UpdateCommitteeAction)(nil),     // 22: utxorpc.v1alpha.cardano.UpdateCommitteeAction
	(*NewConstitutionAction)(nil),     // 23: utxorpc.v1alpha.cardano.NewConstitutionAction
	(*Constitution)(nil),              // 24: utxorpc.v1alpha.cardano.Constitution
	(*NewCommitteeCredentials)(nil),   // 25: utxorpc.v1alpha.cardano.NewCommitteeCredentials
	(*BlockHeader)(nil),               // 26: utxorpc.v1alpha.cardano.BlockHeader
	(*BlockBody)(nil),                 // 27: utxorpc.v1alpha.cardano.BlockBody
	(*Block)(nil),                     // 28: utxorpc.v1alpha.cardano.Block
	(*VKeyWitness)(nil),               // 29: utxorpc.v1alpha.cardano.VKeyWitness
	(*NativeScript)(nil),              // 30: utxorpc.v1alpha.cardano.NativeScript
	(*NativeScriptList)(nil),          // 31: utxorpc.v1alpha.cardano.NativeScriptList
	(*ScriptNOfK)(nil),                // 32: utxorpc.v1alpha.cardano.ScriptNOfK
	(*Constr)(nil),                    // 33: utxorpc.v1alpha.cardano.Constr
	(*BigInt)(nil),                    // 34: utxorpc.v1alpha.cardano.BigInt
	(*PlutusDataPair)(nil),            // 35: utxorpc.v1alpha.cardano.PlutusDataPair
	(*PlutusData)(nil),                // 36: utxorpc.v1alpha.cardano.PlutusData
	(*PlutusDataMap)(nil),             // 37: utxorpc.v1alpha.cardano.PlutusDataMap
	(*PlutusDataArray)(nil),           // 38: utxorpc.v1alpha.cardano.PlutusDataArray
	(*Script)(nil),                    // 39: utxorpc.v1alpha.cardano.Script
	(*Metadatum)(nil),                 // 40: utxorpc.v1alpha.cardano.Metadatum
	(*MetadatumArray)(nil),            // 41: utxorpc.v1alpha.cardano.MetadatumArray
	(*MetadatumMap)(nil),              // 42: utxorpc.v1alpha.cardano.MetadatumMap
	(*MetadatumPair)(nil),             // 43: utxorpc.v1alpha.cardano.MetadatumPair
	(*Metadata)(nil),                  // 44: utxorpc.v1alpha.cardano.Metadata
	(*StakeCredential)(nil),           // 45: utxorpc.v1alpha.cardano.StakeCredential
	(*RationalNumber)(nil),            // 46: utxorpc.v1alpha.cardano.RationalNumber
	(*Relay)(nil),                     // 47: utxorpc.v1alpha.cardano.Relay
	(*PoolMetadata)(nil),              // 48: utxorpc.v1alpha.cardano.PoolMetadata
	(*Certificate)(nil),               // 49: utxorpc.v1alpha.cardano.Certificate
	(*StakeDelegationCert)(nil),       // 50: utxorpc.v1alpha.cardano.StakeDelegationCert
	(*PoolRegistrationCert)(nil),      // 51: utxorpc.v1alpha.cardano.PoolRegistrationCert
	(*PoolRetirementCert)(nil),        // 52: utxorpc.v1alpha.cardano.PoolRetirementCert
	(*GenesisKeyDelegationCert)(nil),  // 53: utxorpc.v1alpha.cardano.GenesisKeyDelegationCert
	(*MirTarget)(nil),                 // 54: utxorpc.v1alpha.cardano.MirTarget
	(*MirCert)(nil),                   // 55: utxorpc.v1alpha.cardano.MirCert
	(*RegCert)(nil),                   // 56: utxorpc.v1alpha.cardano.RegCert
	(*UnRegCert)(nil),                 // 57: utxorpc.v1alpha.cardano.UnRegCert
	(*DRep)(nil),                      // 58: utxorpc.v1alpha.cardano.DRep
	(*VoteDelegCert)(nil),             // 59: utxorpc.v1alpha.cardano.VoteDelegCert
	(*StakeVoteDelegCert)(nil),        // 60: utxorpc.v1alpha.cardano.StakeVoteDelegCert
	(*StakeRegDelegCert)(nil),         // 61: utxorpc.v1alpha.cardano.StakeRegDelegCert
	(*VoteRegDelegCert)(nil),          // 62: utxorpc.v1alpha.cardano.VoteRegDelegCert
	(*StakeVoteRegDelegCert)(nil),     // 63: utxorpc.v1alpha.cardano.StakeVoteRegDelegCert
	(*AuthCommitteeHotCert)(nil),      // 64: utxorpc.v1alpha.cardano.AuthCommitteeHotCert
	(*Anchor)(nil),                    // 65: utxorpc.v1alpha.cardano.Anchor
	(*ResignCommitteeColdCert)(nil),   // 66: utxorpc.v1alpha.cardano.ResignCommitteeColdCert
	(*RegDRepCert)(nil),               // 67: utxorpc.v1alpha.cardano.RegDRepCert
	(*UnRegDRepCert)(nil),             // 68: utxorpc.v1alpha.cardano.UnRegDRepCert
	(*UpdateDRepCert)(nil),            // 69: utxorpc.v1alpha.cardano.UpdateDRepCert
	(*AddressPattern)(nil),            // 70: utxorpc.v1alpha.cardano.AddressPattern
	(*AssetPattern)(nil),              // 71: utxorpc.v1alpha.cardano.AssetPattern
	(*TxOutputPattern)(nil),           // 72: utxorpc.v1alpha.cardano.TxOutputPattern
	(*TxPattern)(nil),                 // 73: utxorpc.v1alpha.cardano.TxPattern
	(*ExUnits)(nil),                   // 74: utxorpc.v1alpha.cardano.ExUnits
	(*ExPrices)(nil),                  // 75: utxorpc.v1alpha.cardano.ExPrices
	(*ProtocolVersion)(nil),           // 76: utxorpc.v1alpha.cardano.ProtocolVersion
	(*CostModel)(nil),                 // 77: utxorpc.v1alpha.cardano.CostModel
	(*CostModels)(nil),                // 78: utxorpc.v1alpha.cardano.CostModels
	(*VotingThresholds)(nil),          // 79: utxorpc.v1alpha.cardano.VotingThresholds
	(*PParams)(nil),                   // 80: utxorpc.v1alpha.cardano.PParams
	(*EvalError)(nil),                 // 81: utxorpc.v1alpha.cardano.EvalError
	(*EvalTrace)(nil),                 // 82: utxorpc.v1alpha.cardano.EvalTrace
	(*TxEval)(nil),                    // 83: utxorpc.v1alpha.cardano.TxEval
}
var file_utxorpc_v1alpha_cardano_cardano_proto_depIdxs = []int32{
	0,   // 0: utxorpc.v1alpha.cardano.Redeemer.purpose:type_name -> utxorpc.v1alpha.cardano.RedeemerPurpose
	36,  // 1: utxorpc.v1alpha.cardano.Redeemer.payload:type_name -> utxorpc.v1alpha.cardano.PlutusData
	74,  // 2: utxorpc.v1alpha.cardano.Redeemer.ex_units:type_name -> utxorpc.v1alpha.cardano.ExUnits
	4,   // 3: utxorpc.v1alpha.cardano.TxInput.as_output:type_name -> utxorpc.v1alpha.cardano.TxOutput
	2,   // 4: utxorpc.v1alpha.cardano.TxInput.redeemer:type_name -> utxorpc.v1alpha.cardano.Redeemer
	7,   // 5: utxorpc.v1alpha.cardano.TxOutput.assets:type_name -> utxorpc.v1alpha.cardano.Multiasset
	5,   // 6: utxorpc.v1alpha.cardano.TxOutput.datum:type_name -> utxorpc.v1alpha.cardano.Datum
	39,  // 7: utxorpc.v1alpha.cardano.TxOutput.script:type_name -> utxorpc.v1alpha.cardano.Script
	36,  // 8: utxorpc.v1alpha.cardano.Datum.payload:type_name -> utxorpc.v1alpha.cardano.PlutusData
	6,   // 9: utxorpc.v1alpha.cardano.Multiasset.assets:type_name -> utxorpc.v1alpha.cardano.Asset
	2,   // 10: utxorpc.v1alpha.cardano.Multiasset.redeemer:type_name -> utxorpc.v1alpha.cardano.Redeemer
	3,   // 11: utxorpc.v1alpha.cardano.Collateral.collateral:type_name -> utxorpc.v1alpha.cardano.TxInput
	4,   // 12: utxorpc.v1alpha.cardano.Collateral.collateral_return:type_name -> utxorpc.v1alpha.cardano.TxOutput
	2,   // 13: utxorpc.v1alpha.cardano.Withdrawal.redeemer:type_name -> utxorpc.v1alpha.cardano.Redeemer
	29,  // 14: utxorpc.v1alpha.cardano.WitnessSet.vkeywitness:type_name -> utxorpc.v1alpha.cardano.VKeyWitness
	39,  // 15: utxorpc.v1alpha.cardano.WitnessSet.script:type_name -> utxorpc.v1alpha.cardano.Script
	36,  // 16: utxorpc.v1alpha.cardano.WitnessSet.plutus_datums:type_name -> utxorpc.v1alpha.cardano.PlutusData
	44,  // 17: utxorpc.v1alpha.cardano.AuxData.metadata:type_name -> utxorpc.v1alpha.cardano.Metadata
	39,  // 18: utxorpc.v1alpha.cardano.AuxData.scripts:type_name -> utxorpc.v1alpha.cardano.Script
	3,   // 19: utxorpc.v1alpha.cardano.Tx.inputs:type_name -> utxorpc.v1alpha.cardano.TxInput
	4,   // 20: utxorpc.v1alpha.cardano.Tx.outputs:type_name -> utxorpc.v1alpha.cardano.TxOutput
	49,  // 21: utxorpc.v1alpha.cardano.Tx.certificates:type_name -> utxorpc.v1alpha.cardano.Certificate
	10,  // 22: utxorpc.v1alpha.cardano.Tx.withdrawals:type_name -> utxorpc.v1alpha.cardano.Withdrawal
	7,   // 23: utxorpc.v1alpha.cardano.Tx.mint:type_name -> utxorpc.v1alpha.cardano.Multiasset
	3,   // 24: utxorpc.v1alpha.cardano.Tx.reference_inputs:type_name -> utxorpc.v1alpha.cardano.TxInput
	11,  // 25: utxorpc.v1alpha.cardano.Tx.witnesses:type_name -> utxorpc.v1alpha.cardano.WitnessSet
	9,   // 26: utxorpc.v1alpha.cardano.Tx.collateral:type_name -> utxorpc.v1alpha.cardano.Collateral
	8,   // 27: utxorpc.v1alpha.cardano.Tx.validity:type_name -> utxorpc.v1alpha.cardano.TxValidity
	12,  // 28: utxorpc.v1alpha.cardano.Tx.auxiliary:type_name -> utxorpc.v1alpha.cardano.AuxData
	14,  // 29: utxorpc.v1alpha.cardano.Tx.proposals:type_name -> utxorpc.v1alpha.cardano.GovernanceActionProposal
	15,  // 30: utxorpc.v1alpha.cardano.GovernanceActionProposal.gov_action:type_name -> utxorpc.v1alpha.cardano.GovernanceAction
	65,  // 31: utxorpc.v1alpha.cardano.GovernanceActionProposal.anchor:type_name -> utxorpc.v1alpha.cardano.Anchor
	17,  // 32: utxorpc.v1alpha.cardano.GovernanceAction.parameter_change_action:type_name -> utxorpc.v1alpha.cardano.ParameterChangeAction
	18,  // 33: utxorpc.v1alpha.cardano.GovernanceAction.hard_fork_initiation_action:type_name -> utxorpc.v1alpha.cardano.HardForkInitiationAction
	19,  // 34: utxorpc.v1alpha.cardano.GovernanceAction.treasury_withdrawals_action:type_name -> utxorpc.v1alpha.cardano.TreasuryWithdrawalsAction
	21,  // 35: utxorpc.v1alpha.cardano.GovernanceAction.no_confidence_action:type_name -> utxorpc.v1alpha.cardano.NoConfidenceAction
	22,  // 36: utxorpc.v1alpha.cardano.GovernanceAction.update_committee_action:type_name -> utxorpc.v1alpha.cardano.UpdateCommitteeAction
	23,  // 37: utxorpc.v1alpha.cardano.GovernanceAction.new_constitution_action:type_name -> utxorpc.v1alpha.cardano.NewConstitutionAction
	16,  // 38: utxorpc.v1alpha.cardano.ParameterChangeAction.gov_action_id:type_name -> utxorpc.v1alpha.cardano.GovernanceActionId
	80,  // 39: utxorpc.v1alpha.cardano.ParameterChangeAction.protocol_param_update:type_name -> utxorpc.v1alpha.cardano.PParams
	16,  // 40: utxorpc.v1alpha.cardano.HardForkInitiationAction.gov_action_id:type_name -> utxorpc.v1alpha.cardano.GovernanceActionId
	76,  // 41: utxorpc.v1alpha.cardano.HardForkInitiationAction.protocol_version:type_name -> utxorpc.v1alpha.cardano.ProtocolVersion
	20,  // 42: utxorpc.v1alpha.cardano.TreasuryWithdrawalsAction.withdrawals:type_name -> utxorpc.v1alpha.cardano.WithdrawalAmount
	16,  // 43: utxorpc.v1alpha.cardano.NoConfidenceAction.gov_action_id:type_name -> utxorpc.v1alpha.cardano.GovernanceActionId
	16,  // 44: utxorpc.v1alpha.cardano.UpdateCommitteeAction.gov_action_id:type_name -> utxorpc.v1alpha.cardano.GovernanceActionId
	45,  // 45: utxorpc.v1alpha.cardano.UpdateCommitteeAction.remove_committee_credentials:type_name -> utxorpc.v1alpha.cardano.StakeCredential
	25,  // 46: utxorpc.v1alpha.cardano.UpdateCommitteeAction.new_committee_credentials:type_name -> utxorpc.v1alpha.cardano.NewCommitteeCredentials
	46,  // 47: utxorpc.v1alpha.cardano.UpdateCommitteeAction.new_committee_threshold:type_name -> utxorpc.v1alpha.cardano.RationalNumber
	16,  // 48: utxorpc.v1alpha.cardano.NewConstitutionAction.gov_action_id:type_name -> utxorpc.v1alpha.cardano.GovernanceActionId
	24,  // 49: utxorpc.v1alpha.cardano.NewConstitutionAction.constitution:type_name -> utxorpc.v1alpha.cardano.Constitution
	65,  // 50: utxorpc.v1alpha.cardano.Constitution.anchor:type_name -> utxorpc.v1alpha.cardano.Anchor
	45,  // 51: utxorpc.v1alpha.cardano.NewCommitteeCredentials.committee_cold_credential:type_name -> utxorpc.v1alpha.cardano.StakeCredential
	13,  // 52: utxorpc.v1alpha.cardano.BlockBody.tx:type_name -> utxorpc.v1alpha.cardano.Tx
	26,  // 53: utxorpc.v1alpha.cardano.Block.header:type_name -> utxorpc.v1alpha.cardano.BlockHeader
	27,  // 54: utxorpc.v1alpha.cardano.Block.body:type_name -> utxorpc.v1alpha.cardano.BlockBody
	31,  // 55: utxorpc.v1alpha.cardano.NativeScript.script_all:type_name -> utxorpc.v1alpha.cardano.NativeScriptList
	31,  // 56: utxorpc.v1alpha.cardano.NativeScript.script_any:type_name -> utxorpc.v1alpha.cardano.NativeScriptList
	32,  // 57: utxorpc.v1alpha.cardano.NativeScript.script_n_of_k:type_name -> utxorpc.v1alpha.cardano.ScriptNOfK
	30,  // 58: utxorpc.v1alpha.cardano.NativeScriptList.items:type_name -> utxorpc.v1alpha.cardano.NativeScript
	30,  // 59: utxorpc.v1alpha.cardano.ScriptNOfK.scripts:type_name -> utxorpc.v1alpha.cardano.NativeScript
	36,  // 60: utxorpc.v1alpha.cardano.Constr.fields:type_name -> utxorpc.v1alpha.cardano.PlutusData
	36,  // 61: utxorpc.v1alpha.cardano.PlutusDataPair.key:type_name -> utxorpc.v1alpha.cardano.PlutusData
	36,  // 62: utxorpc.v1alpha.cardano.PlutusDataPair.value:type_name -> utxorpc.v1alpha.cardano.PlutusData
	33,  // 63: utxorpc.v1alpha.cardano.PlutusData.constr:type_name -> utxorpc.v1alpha.cardano.Constr
	37,  // 64: utxorpc.v1alpha.cardano.PlutusData.map:type_name -> utxorpc.v1alpha.cardano.PlutusDataMap
	34,  // 65: utxorpc.v1alpha.cardano.PlutusData.big_int:type_name -> utxorpc.v1alpha.cardano.BigInt
	38,  // 66: utxorpc.v1alpha.cardano.PlutusData.array:type_name -> utxorpc.v1alpha.cardano.PlutusDataArray
	35,  // 67: utxorpc.v1alpha.cardano.PlutusDataMap.pairs:type_name -> utxorpc.v1alpha.cardano.PlutusDataPair
	36,  // 68: utxorpc.v1alpha.cardano.PlutusDataArray.items:type_name -> utxorpc.v1alpha.cardano.PlutusData
	30,  // 69: utxorpc.v1alpha.cardano.Script.native:type_name -> utxorpc.v1alpha.cardano.NativeScript
	41,  // 70: utxorpc.v1alpha.cardano.Metadatum.array:type_name -> utxorpc.v1alpha.cardano.MetadatumArray
	42,  // 71: utxorpc.v1alpha.cardano.Metadatum.map:type_name -> utxorpc.v1alpha.cardano.MetadatumMap
	40,  // 72: utxorpc.v1alpha.cardano.MetadatumArray.items:type_name -> utxorpc.v1alpha.cardano.Metadatum
	43,  // 73: utxorpc.v1alpha.cardano.MetadatumMap.pairs:type_name -> utxorpc.v1alpha.cardano.MetadatumPair
	40,  // 74: utxorpc.v1alpha.cardano.MetadatumPair.key:type_name -> utxorpc.v1alpha.cardano.Metadatum
	40,  // 75: utxorpc.v1alpha.cardano.MetadatumPair.value:type_name -> utxorpc.v1alpha.cardano.Metadatum
	40,  // 76: utxorpc.v1alpha.cardano.Metadata.value:type_name -> utxorpc.v1alpha.cardano.Metadatum
	45,  // 77: utxorpc.v1alpha.cardano.Certificate.stake_registration:type_name -> utxorpc.v1alpha.cardano.StakeCredential
	45,  // 78: utxorpc.v1alpha.cardano.Certificate.stake_deregistration:type_name -> utxorpc.v1alpha.cardano.StakeCredential
	50,  // 79: utxorpc.v1alpha.cardano.Certificate.stake_delegation:type_name -> utxorpc.v1alpha.cardano.StakeDelegationCert
	51,  // 80: utxorpc.v1alpha.cardano.Certificate.pool_registration:type_name -> utxorpc.v1alpha.cardano.PoolRegistrationCert
	52,  // 81: utxorpc.v1alpha.cardano.Certificate.pool_retirement:type_name -> utxorpc.v1alpha.cardano.PoolRetirementCert
	53,  // 82: utxorpc.v1alpha.cardano.Certificate.genesis_key_delegation:type_name -> utxorpc.v1alpha.cardano.GenesisKeyDelegationCert
	55,  // 83: utxorpc.v1alpha.cardano.Certificate.mir_cert:type_name -> utxorpc.v1alpha.cardano.MirCert
	56,  // 84: utxorpc.v1alpha.cardano.Certificate.reg_cert:type_name -> utxorpc.v1alpha.cardano.RegCert
	57,  // 85: utxorpc.v1alpha.cardano.Certificate.unreg_cert:type_name -> utxorpc.v1alpha.cardano.UnRegCert
	59,  // 86: utxorpc.v1alpha.cardano.Certificate.vote_deleg_cert:type_name -> utxorpc.v1alpha.cardano.VoteDelegCert
	60,  // 87: utxorpc.v1alpha.cardano.Certificate.stake_vote_deleg_cert:type_name -> utxorpc.v1alpha.cardano.StakeVoteDelegCert
	61,  // 88: utxorpc.v1alpha.cardano.Certificate.stake_reg_deleg_cert:type_name -> utxorpc.v1alpha.cardano.StakeRegDelegCert
	62,  // 89: utxorpc.v1alpha.cardano.Certificate.vote_reg_deleg_cert:type_name -> utxorpc.v1alpha.cardano.VoteRegDelegCert
	63,  // 90: utxorpc.v1alpha.cardano.Certificate.stake_vote_reg_deleg_cert:type_name -> utxorpc.v1alpha.cardano.StakeVoteRegDelegCert
	64,  // 91: utxorpc.v1alpha.cardano.Certificate.auth_committee_hot_cert:type_name -> utxorpc.v1alpha.cardano.AuthCommitteeHotCert
	66,  // 92: utxorpc.v1alpha.cardano.Certificate.resign_committee_cold_cert:type_name -> utxorpc.v1alpha.cardano.ResignCommitteeColdCert
	67,  // 93: utxorpc.v1alpha.cardano.Certificate.reg_drep_cert:type_name -> utxorpc.v1alpha.cardano.RegDRepCert
	68,  // 94: utxorpc.v1alpha.cardano.Certificate.unreg_drep_cert:type_name -> utxorpc.v1alpha.cardano.UnRegDRepCert
	69,  // 95: utxorpc.v1alpha.cardano.Certificate.update_drep_cert:type_name -> utxorpc.v1alpha.cardano.UpdateDRepCert
	2,   // 96: utxorpc.v1alpha.cardano.Certificate.redeemer:type_name -> utxorpc.v1alpha.cardano.Redeemer
	45,  // 97: utxorpc.v1alpha.cardano.StakeDelegationCert.stake_credential:type_name -> utxorpc.v1alpha.cardano.StakeCredential
	46,  // 98: utxorpc.v1alpha.cardano.PoolRegistrationCert.margin:type_name -> utxorpc.v1alpha.cardano.RationalNumber
	47,  // 99: utxorpc.v1alpha.cardano.PoolRegistrationCert.relays:type_name -> utxorpc.v1alpha.cardano.Relay
	48,  // 100: utxorpc.v1alpha.cardano.PoolRegistrationCert.pool_metadata:type_name -> utxorpc.v1alpha.cardano.PoolMetadata
	45,  // 101: utxorpc.v1alpha.cardano.MirTarget.stake_credential:type_name -> utxorpc.v1alpha.cardano.StakeCredential
	1,   // 102: utxorpc.v1alpha.cardano.MirCert.from:type_name -> utxorpc.v1alpha.cardano.MirSource
	54,  // 103: utxorpc.v1alpha.cardano.MirCert.to:type_name -> utxorpc.v1alpha.cardano.MirTarget
	45,  // 104: utxorpc.v1alpha.cardano.RegCert.stake_credential:type_name -> utxorpc.v1alpha.cardano.StakeCredential
	45,  // 105: utxorpc.v1alpha.cardano.UnRegCert.stake_credential:type_name -> utxorpc.v1alpha.cardano.StakeCredential
	45,  // 106: utxorpc.v1alpha.cardano.VoteDelegCert.stake_credential:type_name -> utxorpc.v1alpha.cardano.StakeCredential
	58,  // 107: utxorpc.v1alpha.cardano.VoteDelegCert.drep:type_name -> utxorpc.v1alpha.cardano.DRep
	45,  // 108: utxorpc.v1alpha.cardano.StakeVoteDelegCert.stake_credential:type_name -> utxorpc.v1alpha.cardano.StakeCredential
	58,  // 109: utxorpc.v1alpha.cardano.StakeVoteDelegCert.drep:type_name -> utxorpc.v1alpha.cardano.DRep
	45,  // 110: utxorpc.v1alpha.cardano.StakeRegDelegCert.stake_credential:type_name -> utxorpc.v1alpha.cardano.StakeCredential
	45,  // 111: utxorpc.v1alpha.cardano.VoteRegDelegCert.stake_credential:type_name -> utxorpc.v1alpha.cardano.StakeCredential
	58,  // 112: utxorpc.v1alpha.cardano.VoteRegDelegCert.drep:type_name -> utxorpc.v1alpha.cardano.DRep
	45,  // 113: utxorpc.v1alpha.cardano.StakeVoteRegDelegCert.stake_credential:type_name -> utxorpc.v1alpha.cardano.StakeCredential
	58,  // 114: utxorpc.v1alpha.cardano.StakeVoteRegDelegCert.drep:type_name -> utxorpc.v1alpha.cardano.DRep
	45,  // 115: utxorpc.v1alpha.cardano.AuthCommitteeHotCert.committee_cold_credential:type_name -> utxorpc.v1alpha.cardano.StakeCredential
	45,  // 116: utxorpc.v1alpha.cardano.AuthCommitteeHotCert.committee_hot_credential:type_name -> utxorpc.v1alpha.cardano.StakeCredential
	45,  // 117: utxorpc.v1alpha.cardano.ResignCommitteeColdCert.committee_cold_credential:type_name -> utxorpc.v1alpha.cardano.StakeCredential
	65,  // 118: utxorpc.v1alpha.cardano.ResignCommitteeColdCert.anchor:type_name -> utxorpc.v1alpha.cardano.Anchor
	45,  // 119: utxorpc.v1alpha.cardano.RegDRepCert.drep_credential:type_name -> utxorpc.v1alpha.cardano.StakeCredential
	65,  // 120: utxorpc.v1alpha.cardano.RegDRepCert.anchor:type_name -> utxorpc.v1alpha.cardano.Anchor
	45,  // 121: utxorpc.v1alpha.cardano.UnRegDRepCert.drep_credential:type_name -> utxorpc.v1alpha.cardano.StakeCredential
	45,  // 122: utxorpc.v1alpha.cardano.UpdateDRepCert.drep_credential:type_name -> utxorpc.v1alpha.cardano.StakeCredential
	65,  // 123: utxorpc.v1alpha.cardano.UpdateDRepCert.anchor:type_name -> utxorpc.v1alpha.cardano.Anchor
	70,  // 124: utxorpc.v1alpha.cardano.TxOutputPattern.address:type_name -> utxorpc.v1alpha.cardano.AddressPattern
	71,  // 125: utxorpc.v1alpha.cardano.TxOutputPattern.asset:type_name -> utxorpc.v1alpha.cardano.AssetPattern
	72,  // 126: utxorpc.v1alpha.cardano.TxPattern.consumes:type_name -> utxorpc.v1alpha.cardano.TxOutputPattern
	72,  // 127: utxorpc.v1alpha.cardano.TxPattern.produces:type_name -> utxorpc.v1alpha.cardano.TxOutputPattern
	70,  // 128: utxorpc.v1alpha.cardano.TxPattern.has_address:type_name -> utxorpc.v1alpha.cardano.AddressPattern
	71,  // 129: utxorpc.v1alpha.cardano.TxPattern.moves_asset:type_name -> utxorpc.v1alpha.cardano.AssetPattern
	71,  // 130: utxorpc.v1alpha.cardano.TxPattern.mints_asset:type_name -> utxorpc.v1alpha.cardano.AssetPattern
	46,  // 131: utxorpc.v1alpha.cardano.ExPrices.steps:type_name -> utxorpc.v1alpha.cardano.RationalNumber
	46,  // 132: utxorpc.v1alpha.cardano.ExPrices.memory:type_name -> utxorpc.v1alpha.cardano.RationalNumber
	77,  // 133: utxorpc.v1alpha.cardano.CostModels.plutus_v1:type_name -> utxorpc.v1alpha.cardano.CostModel
	77,  // 134: utxorpc.v1alpha.cardano.CostModels.plutus_v2:type_name -> utxorpc.v1alpha.cardano.CostModel
	77,  // 135: utxorpc.v1alpha.cardano.CostModels.plutus_v3:type_name -> utxorpc.v1alpha.cardano.CostModel
	46,  // 136: utxorpc.v1alpha.cardano.VotingThresholds.thresholds:type_name -> utxorpc.v1alpha.cardano.RationalNumber
	46,  // 137: utxorpc.v1alpha.cardano.PParams.pool_influence:type_name -> utxorpc.v1alpha.cardano.RationalNumber
	46,  // 138: utxorpc.v1alpha.cardano.PParams.monetary_expansion:type_name -> utxorpc.v1alpha.cardano.RationalNumber
	46,  // 139: utxorpc.v1alpha.cardano.PParams.treasury_expansion:type_name -> utxorpc.v1alpha.cardano.RationalNumber
	76,  // 140: utxorpc.v1alpha.cardano.PParams.protocol_version:type_name -> utxorpc.v1alpha.cardano.ProtocolVersion
	78,  // 141: utxorpc.v1alpha.cardano.PParams.cost_models:type_name -> utxorpc.v1alpha.cardano.CostModels
	75,  // 142: utxorpc.v1alpha.cardano.PParams.prices:type_name -> utxorpc.v1alpha.cardano.ExPrices
	74,  // 143: utxorpc.v1alpha.cardano.PParams.max_execution_units_per_transaction:type_name -> utxorpc.v1alpha.cardano.ExUnits
	74,  // 144: utxorpc.v1alpha.cardano.PParams.max_execution_units_per_block:type_name -> utxorpc.v1alpha.cardano.ExUnits
	46,  // 145: utxorpc.v1alpha.cardano.PParams.min_fee_script_ref_cost_per_byte:type_name -> utxorpc.v1alpha.cardano.RationalNumber
	79,  // 146: utxorpc.v1alpha.cardano.PParams.pool_voting_thresholds:type_name -> utxorpc.v1alpha.cardano.VotingThresholds
	79,  // 147: utxorpc.v1alpha.cardano.PParams.drep_voting_thresholds:type_name -> utxorpc.v1alpha.cardano.VotingThresholds
	74,  // 148: utxorpc.v1alpha.cardano.TxEval.ex_units:type_name -> utxorpc.v1alpha.cardano.ExUnits
	81,  // 149: utxorpc.v1alpha.cardano.TxEval.errors:type_name -> utxorpc.v1alpha.cardano.EvalError
	82,  // 150: utxorpc.v1alpha.cardano.TxEval.traces:type_name -> utxorpc.v1alpha.cardano.EvalTrace
	2,   // 151: utxorpc.v1alpha.cardano.TxEval.redeemers:type_name -> utxorpc.v1alpha.cardano.Redeemer
	152, // [152:152] is the sub-list for method output_type
	152, // [152:152] is the sub-list for method input_type
	152, // [152:152] is the sub-list for extension type_name
	152, // [152:152] is the sub-list for extension extendee
	0,   // [0:152] is the sub-list for field type_name
}

func init() { file_utxorpc_v1alpha_cardano_cardano_proto_init() }
func file_utxorpc_v1alpha_cardano_cardano_proto_init() {
	if File_utxorpc_v1alpha_cardano_cardano_proto != nil {
		return
	}
	file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[13].OneofWrappers = []any{
		(*GovernanceAction_ParameterChangeAction)(nil),
		(*GovernanceAction_HardForkInitiationAction)(nil),
		(*GovernanceAction_TreasuryWithdrawalsAction)(nil),
		(*GovernanceAction_NoConfidenceAction)(nil),
		(*GovernanceAction_UpdateCommitteeAction)(nil),
		(*GovernanceAction_NewConstitutionAction)(nil),
		(*GovernanceAction_InfoAction)(nil),
	}
	file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[28].OneofWrappers = []any{
		(*NativeScript_ScriptPubkey)(nil),
		(*NativeScript_ScriptAll)(nil),
		(*NativeScript_ScriptAny)(nil),
		(*NativeScript_ScriptNOfK)(nil),
		(*NativeScript_InvalidBefore)(nil),
		(*NativeScript_InvalidHereafter)(nil),
	}
	file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[32].OneofWrappers = []any{
		(*BigInt_Int)(nil),
		(*BigInt_BigUInt)(nil),
		(*BigInt_BigNInt)(nil),
	}
	file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[34].OneofWrappers = []any{
		(*PlutusData_Constr)(nil),
		(*PlutusData_Map)(nil),
		(*PlutusData_BigInt)(nil),
		(*PlutusData_BoundedBytes)(nil),
		(*PlutusData_Array)(nil),
	}
	file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[37].OneofWrappers = []any{
		(*Script_Native)(nil),
		(*Script_PlutusV1)(nil),
		(*Script_PlutusV2)(nil),
		(*Script_PlutusV3)(nil),
	}
	file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[38].OneofWrappers = []any{
		(*Metadatum_Int)(nil),
		(*Metadatum_Bytes)(nil),
		(*Metadatum_Text)(nil),
		(*Metadatum_Array)(nil),
		(*Metadatum_Map)(nil),
	}
	file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[43].OneofWrappers = []any{
		(*StakeCredential_AddrKeyHash)(nil),
		(*StakeCredential_ScriptHash)(nil),
	}
	file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[47].OneofWrappers = []any{
		(*Certificate_StakeRegistration)(nil),
		(*Certificate_StakeDeregistration)(nil),
		(*Certificate_StakeDelegation)(nil),
		(*Certificate_PoolRegistration)(nil),
		(*Certificate_PoolRetirement)(nil),
		(*Certificate_GenesisKeyDelegation)(nil),
		(*Certificate_MirCert)(nil),
		(*Certificate_RegCert)(nil),
		(*Certificate_UnregCert)(nil),
		(*Certificate_VoteDelegCert)(nil),
		(*Certificate_StakeVoteDelegCert)(nil),
		(*Certificate_StakeRegDelegCert)(nil),
		(*Certificate_VoteRegDelegCert)(nil),
		(*Certificate_StakeVoteRegDelegCert)(nil),
		(*Certificate_AuthCommitteeHotCert)(nil),
		(*Certificate_ResignCommitteeColdCert)(nil),
		(*Certificate_RegDrepCert)(nil),
		(*Certificate_UnregDrepCert)(nil),
		(*Certificate_UpdateDrepCert)(nil),
	}
	file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[56].OneofWrappers = []any{
		(*DRep_AddrKeyHash)(nil),
		(*DRep_ScriptHash)(nil),
		(*DRep_Abstain)(nil),
		(*DRep_NoConfidence)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_utxorpc_v1alpha_cardano_cardano_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   82,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_utxorpc_v1alpha_cardano_cardano_proto_goTypes,
		DependencyIndexes: file_utxorpc_v1alpha_cardano_cardano_proto_depIdxs,
		EnumInfos:         file_utxorpc_v1alpha_cardano_cardano_proto_enumTypes,
		MessageInfos:      file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes,
	}.Build()
	File_utxorpc_v1alpha_cardano_cardano_proto = out.File
	file_utxorpc_v1alpha_cardano_cardano_proto_rawDesc = nil
	file_utxorpc_v1alpha_cardano_cardano_proto_goTypes = nil
	file_utxorpc_v1alpha_cardano_cardano_proto_depIdxs = nil
}
