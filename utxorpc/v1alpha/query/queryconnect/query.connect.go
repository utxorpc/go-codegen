/// A consistent view of the state of the ledger

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: utxorpc/v1alpha/query/query.proto

package queryconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	query "github.com/utxorpc/go-codegen/utxorpc/v1alpha/query"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// QueryServiceName is the fully-qualified name of the QueryService service.
	QueryServiceName = "utxorpc.v1alpha.query.QueryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// QueryServiceReadParamsProcedure is the fully-qualified name of the QueryService's ReadParams RPC.
	QueryServiceReadParamsProcedure = "/utxorpc.v1alpha.query.QueryService/ReadParams"
	// QueryServiceReadUtxosProcedure is the fully-qualified name of the QueryService's ReadUtxos RPC.
	QueryServiceReadUtxosProcedure = "/utxorpc.v1alpha.query.QueryService/ReadUtxos"
	// QueryServiceSearchUtxosProcedure is the fully-qualified name of the QueryService's SearchUtxos
	// RPC.
	QueryServiceSearchUtxosProcedure = "/utxorpc.v1alpha.query.QueryService/SearchUtxos"
	// QueryServiceReadDataProcedure is the fully-qualified name of the QueryService's ReadData RPC.
	QueryServiceReadDataProcedure = "/utxorpc.v1alpha.query.QueryService/ReadData"
	// QueryServiceReadTxProcedure is the fully-qualified name of the QueryService's ReadTx RPC.
	QueryServiceReadTxProcedure = "/utxorpc.v1alpha.query.QueryService/ReadTx"
	// QueryServiceReadGenesisProcedure is the fully-qualified name of the QueryService's ReadGenesis
	// RPC.
	QueryServiceReadGenesisProcedure = "/utxorpc.v1alpha.query.QueryService/ReadGenesis"
	// QueryServiceReadEraSummaryProcedure is the fully-qualified name of the QueryService's
	// ReadEraSummary RPC.
	QueryServiceReadEraSummaryProcedure = "/utxorpc.v1alpha.query.QueryService/ReadEraSummary"
)

// QueryServiceClient is a client for the utxorpc.v1alpha.query.QueryService service.
type QueryServiceClient interface {
	ReadParams(context.Context, *connect.Request[query.ReadParamsRequest]) (*connect.Response[query.ReadParamsResponse], error)
	ReadUtxos(context.Context, *connect.Request[query.ReadUtxosRequest]) (*connect.Response[query.ReadUtxosResponse], error)
	SearchUtxos(context.Context, *connect.Request[query.SearchUtxosRequest]) (*connect.Response[query.SearchUtxosResponse], error)
	ReadData(context.Context, *connect.Request[query.ReadDataRequest]) (*connect.Response[query.ReadDataResponse], error)
	ReadTx(context.Context, *connect.Request[query.ReadTxRequest]) (*connect.Response[query.ReadTxResponse], error)
	ReadGenesis(context.Context, *connect.Request[query.ReadGenesisRequest]) (*connect.Response[query.ReadGenesisResponse], error)
	ReadEraSummary(context.Context, *connect.Request[query.ReadEraSummaryRequest]) (*connect.Response[query.ReadEraSummaryResponse], error)
}

// NewQueryServiceClient constructs a client for the utxorpc.v1alpha.query.QueryService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewQueryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) QueryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	queryServiceMethods := query.File_utxorpc_v1alpha_query_query_proto.Services().ByName("QueryService").Methods()
	return &queryServiceClient{
		readParams: connect.NewClient[query.ReadParamsRequest, query.ReadParamsResponse](
			httpClient,
			baseURL+QueryServiceReadParamsProcedure,
			connect.WithSchema(queryServiceMethods.ByName("ReadParams")),
			connect.WithClientOptions(opts...),
		),
		readUtxos: connect.NewClient[query.ReadUtxosRequest, query.ReadUtxosResponse](
			httpClient,
			baseURL+QueryServiceReadUtxosProcedure,
			connect.WithSchema(queryServiceMethods.ByName("ReadUtxos")),
			connect.WithClientOptions(opts...),
		),
		searchUtxos: connect.NewClient[query.SearchUtxosRequest, query.SearchUtxosResponse](
			httpClient,
			baseURL+QueryServiceSearchUtxosProcedure,
			connect.WithSchema(queryServiceMethods.ByName("SearchUtxos")),
			connect.WithClientOptions(opts...),
		),
		readData: connect.NewClient[query.ReadDataRequest, query.ReadDataResponse](
			httpClient,
			baseURL+QueryServiceReadDataProcedure,
			connect.WithSchema(queryServiceMethods.ByName("ReadData")),
			connect.WithClientOptions(opts...),
		),
		readTx: connect.NewClient[query.ReadTxRequest, query.ReadTxResponse](
			httpClient,
			baseURL+QueryServiceReadTxProcedure,
			connect.WithSchema(queryServiceMethods.ByName("ReadTx")),
			connect.WithClientOptions(opts...),
		),
		readGenesis: connect.NewClient[query.ReadGenesisRequest, query.ReadGenesisResponse](
			httpClient,
			baseURL+QueryServiceReadGenesisProcedure,
			connect.WithSchema(queryServiceMethods.ByName("ReadGenesis")),
			connect.WithClientOptions(opts...),
		),
		readEraSummary: connect.NewClient[query.ReadEraSummaryRequest, query.ReadEraSummaryResponse](
			httpClient,
			baseURL+QueryServiceReadEraSummaryProcedure,
			connect.WithSchema(queryServiceMethods.ByName("ReadEraSummary")),
			connect.WithClientOptions(opts...),
		),
	}
}

// queryServiceClient implements QueryServiceClient.
type queryServiceClient struct {
	readParams     *connect.Client[query.ReadParamsRequest, query.ReadParamsResponse]
	readUtxos      *connect.Client[query.ReadUtxosRequest, query.ReadUtxosResponse]
	searchUtxos    *connect.Client[query.SearchUtxosRequest, query.SearchUtxosResponse]
	readData       *connect.Client[query.ReadDataRequest, query.ReadDataResponse]
	readTx         *connect.Client[query.ReadTxRequest, query.ReadTxResponse]
	readGenesis    *connect.Client[query.ReadGenesisRequest, query.ReadGenesisResponse]
	readEraSummary *connect.Client[query.ReadEraSummaryRequest, query.ReadEraSummaryResponse]
}

// ReadParams calls utxorpc.v1alpha.query.QueryService.ReadParams.
func (c *queryServiceClient) ReadParams(ctx context.Context, req *connect.Request[query.ReadParamsRequest]) (*connect.Response[query.ReadParamsResponse], error) {
	return c.readParams.CallUnary(ctx, req)
}

// ReadUtxos calls utxorpc.v1alpha.query.QueryService.ReadUtxos.
func (c *queryServiceClient) ReadUtxos(ctx context.Context, req *connect.Request[query.ReadUtxosRequest]) (*connect.Response[query.ReadUtxosResponse], error) {
	return c.readUtxos.CallUnary(ctx, req)
}

// SearchUtxos calls utxorpc.v1alpha.query.QueryService.SearchUtxos.
func (c *queryServiceClient) SearchUtxos(ctx context.Context, req *connect.Request[query.SearchUtxosRequest]) (*connect.Response[query.SearchUtxosResponse], error) {
	return c.searchUtxos.CallUnary(ctx, req)
}

// ReadData calls utxorpc.v1alpha.query.QueryService.ReadData.
func (c *queryServiceClient) ReadData(ctx context.Context, req *connect.Request[query.ReadDataRequest]) (*connect.Response[query.ReadDataResponse], error) {
	return c.readData.CallUnary(ctx, req)
}

// ReadTx calls utxorpc.v1alpha.query.QueryService.ReadTx.
func (c *queryServiceClient) ReadTx(ctx context.Context, req *connect.Request[query.ReadTxRequest]) (*connect.Response[query.ReadTxResponse], error) {
	return c.readTx.CallUnary(ctx, req)
}

// ReadGenesis calls utxorpc.v1alpha.query.QueryService.ReadGenesis.
func (c *queryServiceClient) ReadGenesis(ctx context.Context, req *connect.Request[query.ReadGenesisRequest]) (*connect.Response[query.ReadGenesisResponse], error) {
	return c.readGenesis.CallUnary(ctx, req)
}

// ReadEraSummary calls utxorpc.v1alpha.query.QueryService.ReadEraSummary.
func (c *queryServiceClient) ReadEraSummary(ctx context.Context, req *connect.Request[query.ReadEraSummaryRequest]) (*connect.Response[query.ReadEraSummaryResponse], error) {
	return c.readEraSummary.CallUnary(ctx, req)
}

// QueryServiceHandler is an implementation of the utxorpc.v1alpha.query.QueryService service.
type QueryServiceHandler interface {
	ReadParams(context.Context, *connect.Request[query.ReadParamsRequest]) (*connect.Response[query.ReadParamsResponse], error)
	ReadUtxos(context.Context, *connect.Request[query.ReadUtxosRequest]) (*connect.Response[query.ReadUtxosResponse], error)
	SearchUtxos(context.Context, *connect.Request[query.SearchUtxosRequest]) (*connect.Response[query.SearchUtxosResponse], error)
	ReadData(context.Context, *connect.Request[query.ReadDataRequest]) (*connect.Response[query.ReadDataResponse], error)
	ReadTx(context.Context, *connect.Request[query.ReadTxRequest]) (*connect.Response[query.ReadTxResponse], error)
	ReadGenesis(context.Context, *connect.Request[query.ReadGenesisRequest]) (*connect.Response[query.ReadGenesisResponse], error)
	ReadEraSummary(context.Context, *connect.Request[query.ReadEraSummaryRequest]) (*connect.Response[query.ReadEraSummaryResponse], error)
}

// NewQueryServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewQueryServiceHandler(svc QueryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	queryServiceMethods := query.File_utxorpc_v1alpha_query_query_proto.Services().ByName("QueryService").Methods()
	queryServiceReadParamsHandler := connect.NewUnaryHandler(
		QueryServiceReadParamsProcedure,
		svc.ReadParams,
		connect.WithSchema(queryServiceMethods.ByName("ReadParams")),
		connect.WithHandlerOptions(opts...),
	)
	queryServiceReadUtxosHandler := connect.NewUnaryHandler(
		QueryServiceReadUtxosProcedure,
		svc.ReadUtxos,
		connect.WithSchema(queryServiceMethods.ByName("ReadUtxos")),
		connect.WithHandlerOptions(opts...),
	)
	queryServiceSearchUtxosHandler := connect.NewUnaryHandler(
		QueryServiceSearchUtxosProcedure,
		svc.SearchUtxos,
		connect.WithSchema(queryServiceMethods.ByName("SearchUtxos")),
		connect.WithHandlerOptions(opts...),
	)
	queryServiceReadDataHandler := connect.NewUnaryHandler(
		QueryServiceReadDataProcedure,
		svc.ReadData,
		connect.WithSchema(queryServiceMethods.ByName("ReadData")),
		connect.WithHandlerOptions(opts...),
	)
	queryServiceReadTxHandler := connect.NewUnaryHandler(
		QueryServiceReadTxProcedure,
		svc.ReadTx,
		connect.WithSchema(queryServiceMethods.ByName("ReadTx")),
		connect.WithHandlerOptions(opts...),
	)
	queryServiceReadGenesisHandler := connect.NewUnaryHandler(
		QueryServiceReadGenesisProcedure,
		svc.ReadGenesis,
		connect.WithSchema(queryServiceMethods.ByName("ReadGenesis")),
		connect.WithHandlerOptions(opts...),
	)
	queryServiceReadEraSummaryHandler := connect.NewUnaryHandler(
		QueryServiceReadEraSummaryProcedure,
		svc.ReadEraSummary,
		connect.WithSchema(queryServiceMethods.ByName("ReadEraSummary")),
		connect.WithHandlerOptions(opts...),
	)
	return "/utxorpc.v1alpha.query.QueryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case QueryServiceReadParamsProcedure:
			queryServiceReadParamsHandler.ServeHTTP(w, r)
		case QueryServiceReadUtxosProcedure:
			queryServiceReadUtxosHandler.ServeHTTP(w, r)
		case QueryServiceSearchUtxosProcedure:
			queryServiceSearchUtxosHandler.ServeHTTP(w, r)
		case QueryServiceReadDataProcedure:
			queryServiceReadDataHandler.ServeHTTP(w, r)
		case QueryServiceReadTxProcedure:
			queryServiceReadTxHandler.ServeHTTP(w, r)
		case QueryServiceReadGenesisProcedure:
			queryServiceReadGenesisHandler.ServeHTTP(w, r)
		case QueryServiceReadEraSummaryProcedure:
			queryServiceReadEraSummaryHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedQueryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedQueryServiceHandler struct{}

func (UnimplementedQueryServiceHandler) ReadParams(context.Context, *connect.Request[query.ReadParamsRequest]) (*connect.Response[query.ReadParamsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("utxorpc.v1alpha.query.QueryService.ReadParams is not implemented"))
}

func (UnimplementedQueryServiceHandler) ReadUtxos(context.Context, *connect.Request[query.ReadUtxosRequest]) (*connect.Response[query.ReadUtxosResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("utxorpc.v1alpha.query.QueryService.ReadUtxos is not implemented"))
}

func (UnimplementedQueryServiceHandler) SearchUtxos(context.Context, *connect.Request[query.SearchUtxosRequest]) (*connect.Response[query.SearchUtxosResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("utxorpc.v1alpha.query.QueryService.SearchUtxos is not implemented"))
}

func (UnimplementedQueryServiceHandler) ReadData(context.Context, *connect.Request[query.ReadDataRequest]) (*connect.Response[query.ReadDataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("utxorpc.v1alpha.query.QueryService.ReadData is not implemented"))
}

func (UnimplementedQueryServiceHandler) ReadTx(context.Context, *connect.Request[query.ReadTxRequest]) (*connect.Response[query.ReadTxResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("utxorpc.v1alpha.query.QueryService.ReadTx is not implemented"))
}

func (UnimplementedQueryServiceHandler) ReadGenesis(context.Context, *connect.Request[query.ReadGenesisRequest]) (*connect.Response[query.ReadGenesisResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("utxorpc.v1alpha.query.QueryService.ReadGenesis is not implemented"))
}

func (UnimplementedQueryServiceHandler) ReadEraSummary(context.Context, *connect.Request[query.ReadEraSummaryRequest]) (*connect.Response[query.ReadEraSummaryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("utxorpc.v1alpha.query.QueryService.ReadEraSummary is not implemented"))
}
