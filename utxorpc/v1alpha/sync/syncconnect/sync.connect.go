// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: utxorpc/v1alpha/sync/sync.proto

package syncconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	sync "github.com/utxorpc/go-codegen/utxorpc/v1alpha/sync"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SyncServiceName is the fully-qualified name of the SyncService service.
	SyncServiceName = "utxorpc.v1alpha.sync.SyncService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SyncServiceFetchBlockProcedure is the fully-qualified name of the SyncService's FetchBlock RPC.
	SyncServiceFetchBlockProcedure = "/utxorpc.v1alpha.sync.SyncService/FetchBlock"
	// SyncServiceDumpHistoryProcedure is the fully-qualified name of the SyncService's DumpHistory RPC.
	SyncServiceDumpHistoryProcedure = "/utxorpc.v1alpha.sync.SyncService/DumpHistory"
	// SyncServiceFollowTipProcedure is the fully-qualified name of the SyncService's FollowTip RPC.
	SyncServiceFollowTipProcedure = "/utxorpc.v1alpha.sync.SyncService/FollowTip"
	// SyncServiceReadTipProcedure is the fully-qualified name of the SyncService's ReadTip RPC.
	SyncServiceReadTipProcedure = "/utxorpc.v1alpha.sync.SyncService/ReadTip"
)

// SyncServiceClient is a client for the utxorpc.v1alpha.sync.SyncService service.
type SyncServiceClient interface {
	FetchBlock(context.Context, *connect.Request[sync.FetchBlockRequest]) (*connect.Response[sync.FetchBlockResponse], error)
	DumpHistory(context.Context, *connect.Request[sync.DumpHistoryRequest]) (*connect.Response[sync.DumpHistoryResponse], error)
	FollowTip(context.Context, *connect.Request[sync.FollowTipRequest]) (*connect.ServerStreamForClient[sync.FollowTipResponse], error)
	ReadTip(context.Context, *connect.Request[sync.ReadTipRequest]) (*connect.Response[sync.ReadTipResponse], error)
}

// NewSyncServiceClient constructs a client for the utxorpc.v1alpha.sync.SyncService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSyncServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SyncServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	syncServiceMethods := sync.File_utxorpc_v1alpha_sync_sync_proto.Services().ByName("SyncService").Methods()
	return &syncServiceClient{
		fetchBlock: connect.NewClient[sync.FetchBlockRequest, sync.FetchBlockResponse](
			httpClient,
			baseURL+SyncServiceFetchBlockProcedure,
			connect.WithSchema(syncServiceMethods.ByName("FetchBlock")),
			connect.WithClientOptions(opts...),
		),
		dumpHistory: connect.NewClient[sync.DumpHistoryRequest, sync.DumpHistoryResponse](
			httpClient,
			baseURL+SyncServiceDumpHistoryProcedure,
			connect.WithSchema(syncServiceMethods.ByName("DumpHistory")),
			connect.WithClientOptions(opts...),
		),
		followTip: connect.NewClient[sync.FollowTipRequest, sync.FollowTipResponse](
			httpClient,
			baseURL+SyncServiceFollowTipProcedure,
			connect.WithSchema(syncServiceMethods.ByName("FollowTip")),
			connect.WithClientOptions(opts...),
		),
		readTip: connect.NewClient[sync.ReadTipRequest, sync.ReadTipResponse](
			httpClient,
			baseURL+SyncServiceReadTipProcedure,
			connect.WithSchema(syncServiceMethods.ByName("ReadTip")),
			connect.WithClientOptions(opts...),
		),
	}
}

// syncServiceClient implements SyncServiceClient.
type syncServiceClient struct {
	fetchBlock  *connect.Client[sync.FetchBlockRequest, sync.FetchBlockResponse]
	dumpHistory *connect.Client[sync.DumpHistoryRequest, sync.DumpHistoryResponse]
	followTip   *connect.Client[sync.FollowTipRequest, sync.FollowTipResponse]
	readTip     *connect.Client[sync.ReadTipRequest, sync.ReadTipResponse]
}

// FetchBlock calls utxorpc.v1alpha.sync.SyncService.FetchBlock.
func (c *syncServiceClient) FetchBlock(ctx context.Context, req *connect.Request[sync.FetchBlockRequest]) (*connect.Response[sync.FetchBlockResponse], error) {
	return c.fetchBlock.CallUnary(ctx, req)
}

// DumpHistory calls utxorpc.v1alpha.sync.SyncService.DumpHistory.
func (c *syncServiceClient) DumpHistory(ctx context.Context, req *connect.Request[sync.DumpHistoryRequest]) (*connect.Response[sync.DumpHistoryResponse], error) {
	return c.dumpHistory.CallUnary(ctx, req)
}

// FollowTip calls utxorpc.v1alpha.sync.SyncService.FollowTip.
func (c *syncServiceClient) FollowTip(ctx context.Context, req *connect.Request[sync.FollowTipRequest]) (*connect.ServerStreamForClient[sync.FollowTipResponse], error) {
	return c.followTip.CallServerStream(ctx, req)
}

// ReadTip calls utxorpc.v1alpha.sync.SyncService.ReadTip.
func (c *syncServiceClient) ReadTip(ctx context.Context, req *connect.Request[sync.ReadTipRequest]) (*connect.Response[sync.ReadTipResponse], error) {
	return c.readTip.CallUnary(ctx, req)
}

// SyncServiceHandler is an implementation of the utxorpc.v1alpha.sync.SyncService service.
type SyncServiceHandler interface {
	FetchBlock(context.Context, *connect.Request[sync.FetchBlockRequest]) (*connect.Response[sync.FetchBlockResponse], error)
	DumpHistory(context.Context, *connect.Request[sync.DumpHistoryRequest]) (*connect.Response[sync.DumpHistoryResponse], error)
	FollowTip(context.Context, *connect.Request[sync.FollowTipRequest], *connect.ServerStream[sync.FollowTipResponse]) error
	ReadTip(context.Context, *connect.Request[sync.ReadTipRequest]) (*connect.Response[sync.ReadTipResponse], error)
}

// NewSyncServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSyncServiceHandler(svc SyncServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	syncServiceMethods := sync.File_utxorpc_v1alpha_sync_sync_proto.Services().ByName("SyncService").Methods()
	syncServiceFetchBlockHandler := connect.NewUnaryHandler(
		SyncServiceFetchBlockProcedure,
		svc.FetchBlock,
		connect.WithSchema(syncServiceMethods.ByName("FetchBlock")),
		connect.WithHandlerOptions(opts...),
	)
	syncServiceDumpHistoryHandler := connect.NewUnaryHandler(
		SyncServiceDumpHistoryProcedure,
		svc.DumpHistory,
		connect.WithSchema(syncServiceMethods.ByName("DumpHistory")),
		connect.WithHandlerOptions(opts...),
	)
	syncServiceFollowTipHandler := connect.NewServerStreamHandler(
		SyncServiceFollowTipProcedure,
		svc.FollowTip,
		connect.WithSchema(syncServiceMethods.ByName("FollowTip")),
		connect.WithHandlerOptions(opts...),
	)
	syncServiceReadTipHandler := connect.NewUnaryHandler(
		SyncServiceReadTipProcedure,
		svc.ReadTip,
		connect.WithSchema(syncServiceMethods.ByName("ReadTip")),
		connect.WithHandlerOptions(opts...),
	)
	return "/utxorpc.v1alpha.sync.SyncService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SyncServiceFetchBlockProcedure:
			syncServiceFetchBlockHandler.ServeHTTP(w, r)
		case SyncServiceDumpHistoryProcedure:
			syncServiceDumpHistoryHandler.ServeHTTP(w, r)
		case SyncServiceFollowTipProcedure:
			syncServiceFollowTipHandler.ServeHTTP(w, r)
		case SyncServiceReadTipProcedure:
			syncServiceReadTipHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSyncServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSyncServiceHandler struct{}

func (UnimplementedSyncServiceHandler) FetchBlock(context.Context, *connect.Request[sync.FetchBlockRequest]) (*connect.Response[sync.FetchBlockResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("utxorpc.v1alpha.sync.SyncService.FetchBlock is not implemented"))
}

func (UnimplementedSyncServiceHandler) DumpHistory(context.Context, *connect.Request[sync.DumpHistoryRequest]) (*connect.Response[sync.DumpHistoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("utxorpc.v1alpha.sync.SyncService.DumpHistory is not implemented"))
}

func (UnimplementedSyncServiceHandler) FollowTip(context.Context, *connect.Request[sync.FollowTipRequest], *connect.ServerStream[sync.FollowTipResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("utxorpc.v1alpha.sync.SyncService.FollowTip is not implemented"))
}

func (UnimplementedSyncServiceHandler) ReadTip(context.Context, *connect.Request[sync.ReadTipRequest]) (*connect.Response[sync.ReadTipResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("utxorpc.v1alpha.sync.SyncService.ReadTip is not implemented"))
}
